{"1172":{"id":"1172","label":"range","path":"api/index/function/range","docType":"function"},"1494":{"id":"1494","label":"publishBehavior"},"1771":{"id":"1771","label":"我要依次订阅它们","options":["a469"]},"1832":{"id":"1832","label":"fromEvent","path":"api/index/function/fromEvent","docType":"function"},"2509":{"id":"2509","label":"基于时间","options":["9629","30a9"]},"2883":{"id":"2883","label":"interval","path":"api/index/function/interval","docType":"function"},"2978":{"id":"2978","label":"当发生错误时","options":["68f0","519a"]},"3273":{"id":"3273","label":"我要把它发送的每个值改成","options":["847d","5ca5"]},"3621":{"id":"3621","label":"我要切换到另一个 Observable","options":["6df1"]},"3674":{"id":"3674","label":"EMPTY","path":"api/index/const/EMPTY","docType":"const"},"3954":{"id":"3954","label":"defer","path":"api/index/function/defer","docType":"function"},"5176":{"id":"5176","label":"bindCallback","path":"api/index/function/bindCallback","docType":"function"},"5179":{"id":"5179","label":"使用 BehaviorSubject","options":["1494"]},"5190":{"id":"5190","label":"发送每个时间窗口中的最后一个值","options":["9e4d","004d"]},"5394":{"id":"5394","label":"retry","path":"api/operators/retry","docType":"function"},"5596":{"id":"5596","label":"如果它们精确的处于第 n 位","options":["3e32"]},"5857":{"id":"5857","label":"race","path":"api/index/function/race","docType":"function"},"6214":{"id":"6214","label":"我要忽略某些值","options":["b0be","6e69","6b17","4a1d","ddc3","ecd5"]},"6464":{"id":"6464","label":"reduce","path":"api/operators/reduce","docType":"function"},"6609":{"id":"6609","label":"我要监听即将发送的值，但不想影响它们","options":["a0a3"]},"7251":{"id":"7251","label":"delay","path":"api/operators/delay","docType":"function"},"7478":{"id":"7478","label":"skipWhile","path":"api/operators/skipWhile","docType":"function"},"7511":{"id":"7511","label":"bufferTime","path":"api/operators/bufferTime","docType":"function"},"8592":{"id":"8592","label":"直到另一个 Observable 发送了值","options":["be7f"]},"8797":{"id":"8797","label":"last","path":"api/operators/last","docType":"function"},"9033":{"id":"9033","label":"基于某个按需创建的 Observable 的发送情况","options":["efbb","61df"]},"9042":{"id":"9042","label":"repeatWhen"},"9245":{"id":"9245","label":"debounceTime","path":"api/operators/debounceTime","docType":"function"},"9629":{"id":"9629","label":"并且把分好的组以数组的形式发送","options":["7511"]},"9712":{"id":"9712","label":"根据特定大小的批次","options":["97c4","498b"]},"b553":{"id":"b553","label":"mapTo"},"847d":{"id":"847d","label":"一个常量值","options":["b553"]},"0bea":{"id":"0bea","label":"map","path":"api/operators/map","docType":"function"},"5ca5":{"id":"5ca5","label":"一个通过公式算出来的值","options":["0bea"]},"80a4":{"id":"80a4","label":"pluck"},"b15c":{"id":"b15c","label":"我要从它发送的每个值中取出一个属性","options":["80a4"]},"a0a3":{"id":"a0a3","label":"tap","path":"api/operators/tap","docType":"function"},"dc47":{"id":"dc47","label":"filter","path":"api/operators/filter","docType":"function"},"2d1e":{"id":"2d1e","label":"基于自定义逻辑","options":["dc47"]},"cfb9":{"id":"cfb9","label":"first","path":"api/operators/first","docType":"function"},"b041":{"id":"b041","label":"并且只要第一个值","options":["cfb9"]},"991a":{"id":"991a","label":"take","path":"api/operators/take","docType":"function"},"c4ff":{"id":"c4ff","label":"基于给定的数量","options":["991a"]},"73e4":{"id":"73e4","label":"takeWhile","path":"api/operators/takeWhile","docType":"function"},"dea5":{"id":"dea5","label":"基于自定义逻辑","options":["73e4"]},"21b0":{"id":"21b0","label":"如果它们位于此 Observable 的首部","options":["b041","c4ff","dea5"]},"3e32":{"id":"3e32","label":"elementAt","path":"api/operators/elementAt","docType":"function"},"5cb5":{"id":"5cb5","label":"并且只要最后一个值","options":["8797"]},"c5f3":{"id":"c5f3","label":"takeLast","path":"api/operators/takeLast","docType":"function"},"c3a5":{"id":"c3a5","label":"基于给定的数量","options":["c5f3"]},"c864":{"id":"c864","label":"如果它们位于此 Observable 的尾部","options":["5cb5","c3a5"]},"be7f":{"id":"be7f","label":"takeUntil","path":"api/operators/takeUntil","docType":"function"},"c05e":{"id":"c05e","label":"我要只允许部分值通过","options":["2d1e","21b0","5596","c864","8592"]},"4eb1":{"id":"4eb1","label":"ignoreElements","path":"api/operators/ignoreElements","docType":"function"},"b0be":{"id":"b0be","label":"全部","options":["4eb1"]},"63bb":{"id":"63bb","label":"skip","path":"api/operators/skip","docType":"function"},"0510":{"id":"0510","label":"基于给定的数量","options":["63bb"]},"5db6":{"id":"5db6","label":"基于自定义逻辑","options":["7478"]},"6e69":{"id":"6e69","label":"从此 Observable 的首部","options":["0510","5db6"]},"c29c":{"id":"c29c","label":"skipLast","path":"api/operators/skipLast","docType":"function"},"6b17":{"id":"6b17","label":"从此 Observable 的尾部","options":["c29c"]},"bab7":{"id":"bab7","label":"skipUntil","path":"api/operators/skipUntil","docType":"function"},"4a1d":{"id":"4a1d","label":"直到另一个 Observable 发送了值","options":["bab7"]},"0e1a":{"id":"0e1a","label":"distinctUntilChanged","path":"api/operators/distinctUntilChanged","docType":"function"},"27e6":{"id":"27e6","label":"发送恰好在当前值前面的那个","options":["0e1a"]},"58c5":{"id":"58c5","label":"distinct","path":"api/operators/distinct","docType":"function"},"4f7d":{"id":"4f7d","label":"以前任何时候曾发送过","options":["58c5"]},"8bbb":{"id":"8bbb","label":"根据值是否相等","options":["27e6","4f7d"]},"5ee5":{"id":"5ee5","label":"distinctUntilKeyChanged","path":"api/operators/distinctUntilKeyChanged","docType":"function"},"18f6":{"id":"18f6","label":"发送恰好在当前值前面的那个","options":["5ee5"]},"ad71":{"id":"ad71","label":"根据一个某个键或对象属性","options":["18f6"]},"ddc3":{"id":"ddc3","label":"与某些以前发送的值匹配","options":["8bbb","ad71"]},"0dfd":{"id":"0dfd","label":"throttle","path":"api/operators/throttle","docType":"function"},"278f":{"id":"278f","label":"这个时间窗口是基于另一个 Observable 的发送情况","options":["0dfd"]},"3adc":{"id":"3adc","label":"throttleTime","path":"api/operators/throttleTime","docType":"function"},"7c9c":{"id":"7c9c","label":"这个时间窗口是根据某个时长来决定的","options":["3adc"]},"7e67":{"id":"7e67","label":"发送每个时间窗口中的第一个值","options":["278f","7c9c"]},"8ed3":{"id":"8ed3","label":"audit","path":"api/operators/audit","docType":"function"},"9e4d":{"id":"9e4d","label":"这个时间窗口是基于另一个 Observable 的发送情况","options":["8ed3"]},"7d89":{"id":"7d89","label":"auditTime","path":"api/operators/auditTime","docType":"function"},"004d":{"id":"004d","label":"这个时间窗口是根据某个时长来决定的","options":["7d89"]},"1f43":{"id":"1f43","label":"debounce","path":"api/operators/debounce","docType":"function"},"b217":{"id":"b217","label":"此平静的间隔阈值由另一个 Observable 决定","options":["1f43"]},"99aa":{"id":"99aa","label":"此平静的间隔阈值是根据某个时长决定的","options":["9245"]},"852b":{"id":"852b","label":"等足够平静时就发送最后一个值","options":["b217","99aa"]},"ecd5":{"id":"ecd5","label":"发生的过于频繁","options":["7e67","5190","852b"]},"0b23":{"id":"0b23","label":"并且只输出最终计算出的值","options":["6464"]},"3a76":{"id":"3a76","label":"scan","path":"api/operators/scan","docType":"function"},"bf75":{"id":"bf75","label":"并且每当来源发送某个值时就输出计算好的值","options":["3a76"]},"b5d8":{"id":"b5d8","label":"mergeScan","path":"api/operators/mergeScan","docType":"function"},"cc68":{"id":"cc68","label":"并且当来源发送某个值时，就把计算好的值输出为一个嵌套 Observable","options":["b5d8"]},"409f":{"id":"409f","label":"switchScan","path":"api/operators/switchScan","docType":"function"},"376a":{"id":"376a","label":"并且每当来源发送某个值时，就把计算好的值输出为一个嵌套 Observable，同时取消对前一个嵌套 Observable 的订阅","options":["409f"]},"20e1":{"id":"20e1","label":"我要使用已发送的所有值做某种计算","options":["0b23","bf75","cc68","376a"]},"451b":{"id":"451b","label":"materialize","path":"api/operators/materialize","docType":"function"},"8f63":{"id":"8f63","label":"此元数据描述每个通知（next、error 或 complete）","options":["451b"]},"a8e3":{"id":"a8e3","label":"timeInterval","path":"api/operators/timeInterval","docType":"function"},"f192":{"id":"f192","label":"次元数据包含从最后一次发送值开始已过去时间","options":["a8e3"]},"7d1a":{"id":"7d1a","label":"我要用元数据包装它的各个消息","options":["8f63","f192"]},"1b98":{"id":"1b98","label":"timeout","path":"api/operators/timeout","docType":"function"},"0a9f":{"id":"0a9f","label":"我要抛出一个错误","options":["1b98"]},"6df1":{"id":"6df1","label":"timeoutWith"},"36d7":{"id":"36d7","label":"在某个非交互式间隔之后","options":["0a9f","3621"]},"80d9":{"id":"80d9","label":"single","path":"api/operators/single","docType":"function"},"b5cf":{"id":"b5cf","label":"我要确保只有一个值","options":["80d9"]},"af79":{"id":"af79","label":"count","path":"api/operators/count","docType":"function"},"fc4a":{"id":"fc4a","label":"我要知道它发送了多少个值","options":["af79"]},"aa53":{"id":"aa53","label":"startWith","path":"api/operators/startWith","docType":"function"},"3eb1":{"id":"3eb1","label":"我要在开头放一个值","options":["aa53"]},"6e56":{"id":"6e56","label":"基于给定的时间","options":["7251"]},"07c6":{"id":"07c6","label":"delayWhen","path":"api/operators/delayWhen","docType":"function"},"e0c7":{"id":"e0c7","label":"基于另一个 Observable 的发送情况","options":["07c6"]},"2ae9":{"id":"2ae9","label":"我要延迟后再发送","options":["6e56","e0c7"]},"712d":{"id":"712d","label":"toArray","path":"api/operators/toArray","docType":"function"},"acfe":{"id":"acfe","label":"并转换为数组","options":["712d"]},"a812":{"id":"a812","label":"Observable","path":"api/index/class/Observable","docType":"class","method":"toPromise"},"adf7":{"id":"adf7","label":"并且转换为 Promise","options":["a812"]},"4a44":{"id":"4a44","label":"直到此 Observable 完成","options":["acfe","adf7"]},"c3be":{"id":"c3be","label":"pairwise","path":"api/operators/pairwise","docType":"function"},"b91d":{"id":"b91d","label":"当任何一个来源发送值的时候，使用每个来源发送的最后一个值","options":["9fbe"]},"6e44":{"id":"6e44","label":"partition","path":"api/index/function/partition","docType":"function"},"a256":{"id":"a256","label":"基于某种标准，并且输出两个 Observable：那些符合此标准的，和不符合此标准的","options":["6e44"]},"ba0e":{"id":"ba0e","label":"bufferCount","path":"api/operators/bufferCount","docType":"function"},"97c4":{"id":"97c4","label":"并且把分好的组以数组形式发送","options":["ba0e"]},"275a":{"id":"275a","label":"windowCount","path":"api/operators/windowCount","docType":"function"},"498b":{"id":"498b","label":"并且把分好的组以嵌套 Observable 的形式发送","options":["275a"]},"daed":{"id":"daed","label":"windowTime","path":"api/operators/windowTime","docType":"function"},"30a9":{"id":"30a9","label":"并且把分好的组以嵌套 Observable 的形式发送","options":["daed"]},"0b73":{"id":"0b73","label":"buffer","path":"api/operators/buffer","docType":"function"},"f505":{"id":"f505","label":"并且把分好的组以数组的形式发送","options":["0b73"]},"997f":{"id":"997f","label":"window","path":"api/operators/window","docType":"function"},"4d70":{"id":"4d70","label":"并且把分好的组以嵌套 Observable 的形式发送","options":["997f"]},"e1a7":{"id":"e1a7","label":"直到另一个 Observable 发送了值","options":["f505","4d70"]},"d69c":{"id":"d69c","label":"bufferWhen","path":"api/operators/bufferWhen","docType":"function"},"efbb":{"id":"efbb","label":"并且把分好的组以数组的形式发送","options":["d69c"]},"06de":{"id":"06de","label":"windowWhen","path":"api/operators/windowWhen","docType":"function"},"61df":{"id":"61df","label":"并且把分好的组以嵌套 Observable 的形式发送","options":["06de"]},"bba8":{"id":"bba8","label":"bufferToggle","path":"api/operators/bufferToggle","docType":"function"},"78da":{"id":"78da","label":"并且把分好的组以数组的形式发送","options":["bba8"]},"d337":{"id":"d337","label":"windowToggle","path":"api/operators/windowToggle","docType":"function"},"9f2e":{"id":"9f2e","label":"并且把分好的组以嵌套 Observable 的形式发送","options":["d337"]},"0638":{"id":"0638","label":"基于另一个 Observable 开始一组，并基于第三个 Observable 结束这一组","options":["78da","9f2e"]},"3c0f":{"id":"3c0f","label":"groupBy","path":"api/operators/groupBy","docType":"function"},"cffd":{"id":"cffd","label":"基于根据已发送的值计算出的一个键","options":["3c0f"]},"daf8":{"id":"daf8","label":"我要对这些值进行分组","options":["4a44","b91d","a256","9712","2509","e1a7","9033","0638","cffd"]},"b087":{"id":"b087","label":"mergeMapTo"},"c71b":{"id":"c71b","label":"这里的嵌套 Observable 对每个值都是一样的","options":["b087"]},"942f":{"id":"942f","label":"mergeMap","path":"api/operators/mergeMap","docType":"function"},"236e":{"id":"236e","label":"这里的嵌套 Observable 是根据每个值现计算的","options":["942f"]},"18dc":{"id":"18dc","label":"并且并行发送全部嵌套 Observable 所发送的值","options":["c71b","236e"]},"9ac2":{"id":"9ac2","label":"concatMapTo"},"af30":{"id":"af30","label":"这里的嵌套 Observable 对每个值都是一样的","options":["9ac2"]},"5d16":{"id":"5d16","label":"concatMap","path":"api/operators/concatMap","docType":"function"},"46fc":{"id":"46fc","label":"这里的嵌套 Observable 是根据每个值现计算的","options":["5d16"]},"2cb1":{"id":"2cb1","label":"并且依次发送每个嵌套 Observable 所发送的值","options":["af30","46fc"]},"f0a5":{"id":"f0a5","label":"switchMapTo"},"1a98":{"id":"1a98","label":"这里的嵌套 Observable 对每个值都是一样的","options":["f0a5"]},"a4da":{"id":"a4da","label":"switchMap","path":"api/operators/switchMap","docType":"function"},"a6ea":{"id":"a6ea","label":"这里的嵌套 Observable 是根据每个值现计算的","options":["a4da"]},"924a":{"id":"924a","label":"并且当新值抵达时，取消前一个嵌套 Observable","options":["1a98","a6ea"]},"2ff2":{"id":"2ff2","label":"exhaustMap","path":"api/operators/exhaustMap","docType":"function"},"83de":{"id":"83de","label":"并且即使当前的嵌套 Observable 尚未完结，也要忽略进来的值","options":["2ff2"]},"fae3":{"id":"fae3","label":"expand","path":"api/operators/expand","docType":"function"},"a6e6":{"id":"a6e6","label":"并且对每一个新值递归启动一个新的 Observable","options":["fae3"]},"d65a":{"id":"d65a","label":"我要为每个值开始一个新的 Observable","options":["18dc","2cb1","924a","83de","a6e6"]},"95fe":{"id":"95fe","label":"pipe","path":"api/index/function/pipe","docType":"function"},"57b2":{"id":"57b2","label":"我要执行自定义操作","options":["95fe"]},"1ef1":{"id":"1ef1","label":"share","path":"api/operators/share","docType":"function"},"c5fb":{"id":"c5fb","label":"并且在第一个订阅者抵达时尽快启动","options":["1ef1"]},"a2d8":{"id":"a2d8","label":"publish"},"f43b":{"id":"f43b","label":"并且手动或用程序启动它","options":["a2d8"]},"15e2":{"id":"15e2","label":"使用常规 Subject","options":["c5fb","f43b"]},"1d43":{"id":"1d43","label":"publishReplay"},"51bc":{"id":"51bc","label":"使用 ReplaySubject","options":["1d43"]},"b70f":{"id":"b70f","label":"publishLast"},"b542":{"id":"b542","label":"使用 AsyncSubject","options":["b70f"]},"07f6":{"id":"07f6","label":"multicast"},"df8c":{"id":"df8c","label":"使用某种特殊的 Subject 实现","options":["07f6"]},"36cf":{"id":"36cf","label":"我要在多个订阅者之间共享某个订阅","options":["15e2","5179","51bc","b542","df8c"]},"fbf9":{"id":"fbf9","label":"catchError","path":"api/operators/catchError","docType":"function"},"68f0":{"id":"68f0","label":"我要启动一个新的 Observable","options":["fbf9"]},"da90":{"id":"da90","label":"立即","options":["5394"]},"5dfd":{"id":"5dfd","label":"retryWhen"},"bab5":{"id":"bab5","label":"当另一个 Observable 发送值的时候","options":["5dfd"]},"519a":{"id":"519a","label":"我要重新订阅","options":["da90","bab5"]},"f85e":{"id":"f85e","label":"repeat","path":"api/operators/repeat","docType":"function"},"f7f3":{"id":"f7f3","label":"立即","options":["f85e"]},"62b5":{"id":"62b5","label":"当另一个 Observable 发送值的时候","options":["9042"]},"6b6b":{"id":"6b6b","label":"我要重新订阅","options":["f7f3","62b5"]},"a753":{"id":"a753","label":"concat","path":"api/index/function/concat","docType":"function"},"7fe4":{"id":"7fe4","label":"我要启动一个新的 Observable","options":["a753"]},"832a":{"id":"832a","label":"当它完成时","options":["6b6b","7fe4"]},"0f3b":{"id":"0f3b","label":"finalize","path":"api/operators/finalize","docType":"function"},"0385":{"id":"0385","label":"当它完成、出错或退订时，我要执行某个函数","options":["0f3b"]},"fd4d":{"id":"fd4d","label":"subscribeOn","path":"api/operators/subscribeOn","docType":"function"},"46ba":{"id":"46ba","label":"它会修改从调用到订阅之间的路由","options":["fd4d"]},"444e":{"id":"444e","label":"observeOn","path":"api/operators/observeOn","docType":"function"},"e716":{"id":"e716","label":"它会修改从发送值到 Observer 之间的路由","options":["444e"]},"8a23":{"id":"8a23","label":"我要更改调度器（Scheduler）","options":["46ba","e716"]},"7a2a":{"id":"7a2a","label":"我只想从首先发送值的 Observable 接收各个值","options":["5857"]},"8d8c":{"id":"8d8c","label":"merge","path":"api/operators/merge","docType":"function"},"0cff":{"id":"0cff","label":"我要输出所有值，而不管是从哪一个发送的","options":["8d8c"]},"652b":{"id":"652b","label":"combineLatest","path":"api/index/function/combineLatest","docType":"function"},"69bd":{"id":"69bd","label":"当任何一个来源发送值的时候，使用每个来源发送的最后一个值","options":["652b"]},"e119":{"id":"e119","label":"withLatestFrom","path":"api/operators/withLatestFrom","docType":"function"},"7ef7":{"id":"7ef7","label":"仅当主 Observable 发送值的时候，使用每个来源发送的最后一个值","options":["e119"]},"4f8f":{"id":"4f8f","label":"zip","path":"api/index/function/zip","docType":"function"},"2a2c":{"id":"2a2c","label":"每个来源中的每个值仅使用一次","options":["4f8f"]},"a60a":{"id":"a60a","label":"我要输出根据源 Observer 发送的值计算出来的某个值","options":["69bd","7ef7","2a2c"]},"433b":{"id":"433b","label":"我要把这个 Observable 和其它的合并，并且","options":["7a2a","0cff","a60a"]},"e22c":{"id":"e22c","label":"我已经有一个 Observable，并且","options":["3273","b15c","6609","c05e","6214","20e1","7d1a","36d7","b5cf","fc4a","3eb1","2ae9","daf8","d65a","57b2","36cf","2978","832a","0385","8a23","433b"]},"9d0c":{"id":"9d0c","label":"race","path":"api/index/function/race","docType":"function"},"ed89":{"id":"ed89","label":"我只想从首先发送值的 Observable 接收各个值","options":["9d0c"]},"a4c7":{"id":"a4c7","label":"forkJoin","path":"api/index/function/forkJoin","docType":"function"},"17c8":{"id":"17c8","label":"我想在它们全都完成时得到通知","options":["a4c7"]},"ce56":{"id":"ce56","label":"merge","path":"api/operators/merge","docType":"function"},"0cb1":{"id":"0cb1","label":"我要输出所有值，而不管是从哪一个发送的","options":["ce56"]},"9fbe":{"id":"9fbe","label":"combineLatest","path":"api/index/function/combineLatest","docType":"function"},"fd13":{"id":"fd13","label":"zip","path":"api/index/function/zip","docType":"function"},"a90a":{"id":"a90a","label":"每个来源中的每个值仅使用一次","options":["fd13"]},"87fb":{"id":"87fb","label":"我要输出根据源 Observer 发送的值计算出来的某个值","options":["b91d","a90a"]},"a469":{"id":"a469","label":"concat","path":"api/index/function/concat","docType":"function"},"25f5":{"id":"25f5","label":"我已经有了由某些 Observable 组合成的单一 Observable，并且","options":["ed89","17c8","0cb1","87fb","1771"]},"8b59":{"id":"8b59","label":"Observable","path":"api/index/class/Observable","docType":"class","method":"create"},"a4d1":{"id":"a4d1","label":"使用自定义逻辑","options":["8b59"]},"676f":{"id":"676f","label":"generate","path":"api/index/function/generate","docType":"function"},"0d43":{"id":"0d43","label":"使用一个类似于 for 循环的状态机","options":["676f"]},"94fa":{"id":"94fa","label":"throwError","path":"api/index/function/throwError","docType":"function"},"5a2c":{"id":"5a2c","label":"抛出一个错误","options":["94fa"]},"fe26":{"id":"fe26","label":"只完成它，而不发送任何值","options":["3674"]},"e14d":{"id":"e14d","label":"NEVER","path":"api/index/const/NEVER","docType":"const"},"06ae":{"id":"06ae","label":"永远不会发送任何东西","options":["e14d"]},"c18a":{"id":"c18a","label":"来自 DOM 或 Node.js 或类似的东西","options":["1832"]},"a9f0":{"id":"a9f0","label":"fromEventPattern","path":"api/index/function/fromEventPattern","docType":"function"},"5d7c":{"id":"5d7c","label":"它使用某个 API 来添加或移除事件处理器","options":["a9f0"]},"2ce8":{"id":"2ce8","label":"从一个现有的事件源","options":["c18a","5d7c"]},"80a6":{"id":"80a6","label":"from","path":"api/index/function/from","docType":"function"},"9d47":{"id":"9d47","label":"来自某个 Promise 或事件源","options":["80a6"]},"7cfa":{"id":"7cfa","label":"from","path":"api/index/function/from","docType":"function"},"ce2e":{"id":"ce2e","label":"针对某个数组中的那些值","options":["7cfa"]},"a8b0":{"id":"a8b0","label":"针对某个数字范围内的那些值","options":["1172"]},"94dd":{"id":"94dd","label":"of","path":"api/index/function/of","docType":"function"},"7ac4":{"id":"7ac4","label":"针对通过参数给出的那些值","options":["94dd"]},"6e3e":{"id":"6e3e","label":"它是可迭代者","options":["ce2e","a8b0","7ac4"]},"599e":{"id":"599e","label":"均匀的","options":["2883"]},"db51":{"id":"db51","label":"timer","path":"api/index/function/timer","docType":"function"},"bf0d":{"id":"bf0d","label":"带有一个可选的首次延迟","options":["db51"]},"2a47":{"id":"2a47","label":"它基于定时器发送一些值","options":["599e","bf0d"]},"d327":{"id":"d327","label":"它在被订阅时才按需创建","options":["3954"]},"b245":{"id":"b245","label":"我要创建一个新的 Observable","options":["a4d1","0d43","5a2c","fe26","06ae","2ce8","9d47","6e3e","2a47","d327"]},"0bbd":{"id":"0bbd","label":"支持常规的回调 API","options":["5176"]},"efd0":{"id":"efd0","label":"bindNodeCallback","path":"api/index/function/bindNodeCallback","docType":"function"},"e62c":{"id":"e62c","label":"支持 Node.js 风格的回调 API","options":["efd0"]},"8e4d":{"id":"8e4d","label":"我要把某个回调函数转换为 Observable","options":["0bbd","e62c"]},"7f48":{"id":"7f48","label":"我还没有任何 Observable，并且","options":["b245","8e4d"]},"initial":{"id":"initial","options":["e22c","25f5","7f48"]}}