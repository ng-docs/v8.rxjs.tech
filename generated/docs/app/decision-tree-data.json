{"1462":{"id":"1462","label":"pluck"},"1677":{"id":"1677","label":"并且手动或用程序启动它","options":["0a47"]},"2033":{"id":"2033","label":"takeUntil","path":"api/operators/takeUntil","docType":"function"},"2073":{"id":"2073","label":"retry","path":"api/operators/retry","docType":"function"},"2140":{"id":"2140","label":"我要使用已发送的所有值做某种计算","options":["8470","cc6a","5352","619f"]},"2464":{"id":"2464","label":"repeat","path":"api/operators/repeat","docType":"function"},"2869":{"id":"2869","label":"我要输出根据源 Observer 发送的值计算出来的某个值","options":["047a","eb71"]},"2941":{"id":"2941","label":"这个时间窗口是根据某个时长来决定的","options":["9039"]},"3627":{"id":"3627","label":"EMPTY","path":"api/index/const/EMPTY","docType":"const"},"3954":{"id":"3954","label":"以前任何时候曾发送过","options":["d4f7"]},"4007":{"id":"4007","label":"使用 AsyncSubject","options":["2bac"]},"4181":{"id":"4181","label":"我只想从首先发送值的 Observable 接收各个值","options":["9fe0"]},"4427":{"id":"4427","label":"window","path":"api/operators/window","docType":"function"},"4495":{"id":"4495","label":"我要重新订阅","options":["af67","f3c9"]},"4542":{"id":"4542","label":"每个来源中的每个值仅使用一次","options":["8fa0"]},"4839":{"id":"4839","label":"windowWhen","path":"api/operators/windowWhen","docType":"function"},"5352":{"id":"5352","label":"并且当来源发送某个值时，就把计算好的值输出为一个嵌套 Observable","options":["368a"]},"5719":{"id":"5719","label":"并且把分好的组以嵌套 Observable 的形式发送","options":["8f13"]},"5742":{"id":"5742","label":"expand","path":"api/operators/expand","docType":"function"},"6099":{"id":"6099","label":"我要从它发送的每个值中取出一个属性","options":["1462"]},"7290":{"id":"7290","label":"并转换为数组","options":["4b62"]},"7385":{"id":"7385","label":"发送恰好在当前值前面的那个","options":["5f16"]},"8413":{"id":"8413","label":"combineLatest","path":"api/index/function/combineLatest","docType":"function"},"8461":{"id":"8461","label":"带有一个可选的首次延迟","options":["804f"]},"8470":{"id":"8470","label":"并且只输出最终计算出的值","options":["c8ea"]},"8528":{"id":"8528","label":"audit","path":"api/operators/audit","docType":"function"},"9039":{"id":"9039","label":"throttleTime","path":"api/operators/throttleTime","docType":"function"},"9171":{"id":"9171","label":"share","path":"api/operators/share","docType":"function"},"9482":{"id":"9482","label":"from","path":"api/index/function/from","docType":"function"},"9813":{"id":"9813","label":"如果它们位于此 Observable 的首部","options":["da21","8b66","43da"]},"9879":{"id":"9879","label":"我要创建一个新的 Observable","options":["d49e","6fff","65c5","4b12","d40e","3e95","e9f1","edc8","d3dd","0b0c"]},"9961":{"id":"9961","label":"combineLatest","path":"api/index/function/combineLatest","docType":"function"},"e831":{"id":"e831","label":"mapTo"},"9a55":{"id":"9a55","label":"一个常量值","options":["e831"]},"9e30":{"id":"9e30","label":"map","path":"api/operators/map","docType":"function"},"f286":{"id":"f286","label":"一个通过公式算出来的值","options":["9e30"]},"2c60":{"id":"2c60","label":"我要把它发送的每个值改成","options":["9a55","f286"]},"2f7b":{"id":"2f7b","label":"tap","path":"api/operators/tap","docType":"function"},"7c88":{"id":"7c88","label":"我要监听即将发送的值，但不想影响它们","options":["2f7b"]},"a6c1":{"id":"a6c1","label":"filter","path":"api/operators/filter","docType":"function"},"19ac":{"id":"19ac","label":"基于自定义逻辑","options":["a6c1"]},"d635":{"id":"d635","label":"first","path":"api/operators/first","docType":"function"},"da21":{"id":"da21","label":"并且只要第一个值","options":["d635"]},"c519":{"id":"c519","label":"take","path":"api/operators/take","docType":"function"},"8b66":{"id":"8b66","label":"基于给定的数量","options":["c519"]},"f35d":{"id":"f35d","label":"takeWhile","path":"api/operators/takeWhile","docType":"function"},"43da":{"id":"43da","label":"基于自定义逻辑","options":["f35d"]},"5dc7":{"id":"5dc7","label":"elementAt","path":"api/operators/elementAt","docType":"function"},"3daf":{"id":"3daf","label":"如果它们精确的处于第 n 位","options":["5dc7"]},"f4bc":{"id":"f4bc","label":"last","path":"api/operators/last","docType":"function"},"31a4":{"id":"31a4","label":"并且只要最后一个值","options":["f4bc"]},"dae1":{"id":"dae1","label":"takeLast","path":"api/operators/takeLast","docType":"function"},"3bf1":{"id":"3bf1","label":"基于给定的数量","options":["dae1"]},"86a0":{"id":"86a0","label":"如果它们位于此 Observable 的尾部","options":["31a4","3bf1"]},"a273":{"id":"a273","label":"直到另一个 Observable 发送了值","options":["2033"]},"63fd":{"id":"63fd","label":"我要只允许部分值通过","options":["19ac","9813","3daf","86a0","a273"]},"2f3b":{"id":"2f3b","label":"ignoreElements","path":"api/operators/ignoreElements","docType":"function"},"58fb":{"id":"58fb","label":"全部","options":["2f3b"]},"cd65":{"id":"cd65","label":"skip","path":"api/operators/skip","docType":"function"},"788c":{"id":"788c","label":"基于给定的数量","options":["cd65"]},"648b":{"id":"648b","label":"skipWhile","path":"api/operators/skipWhile","docType":"function"},"649a":{"id":"649a","label":"基于自定义逻辑","options":["648b"]},"1a90":{"id":"1a90","label":"从此 Observable 的首部","options":["788c","649a"]},"b991":{"id":"b991","label":"skipLast","path":"api/operators/skipLast","docType":"function"},"654a":{"id":"654a","label":"从此 Observable 的尾部","options":["b991"]},"2e4e":{"id":"2e4e","label":"skipUntil","path":"api/operators/skipUntil","docType":"function"},"5a79":{"id":"5a79","label":"直到另一个 Observable 发送了值","options":["2e4e"]},"5f16":{"id":"5f16","label":"distinctUntilChanged","path":"api/operators/distinctUntilChanged","docType":"function"},"d4f7":{"id":"d4f7","label":"distinct","path":"api/operators/distinct","docType":"function"},"ff33":{"id":"ff33","label":"根据值是否相等","options":["7385","3954"]},"b094":{"id":"b094","label":"distinctUntilKeyChanged","path":"api/operators/distinctUntilKeyChanged","docType":"function"},"720d":{"id":"720d","label":"发送恰好在当前值前面的那个","options":["b094"]},"0515":{"id":"0515","label":"根据一个某个键或对象属性","options":["720d"]},"19fe":{"id":"19fe","label":"与某些以前发送的值匹配","options":["ff33","0515"]},"cc12":{"id":"cc12","label":"throttle","path":"api/operators/throttle","docType":"function"},"1a8a":{"id":"1a8a","label":"这个时间窗口是基于另一个 Observable 的发送情况","options":["cc12"]},"c1cd":{"id":"c1cd","label":"发送每个时间窗口中的第一个值","options":["1a8a","2941"]},"af15":{"id":"af15","label":"这个时间窗口是基于另一个 Observable 的发送情况","options":["8528"]},"afd8":{"id":"afd8","label":"auditTime","path":"api/operators/auditTime","docType":"function"},"961d":{"id":"961d","label":"这个时间窗口是根据某个时长来决定的","options":["afd8"]},"c2f3":{"id":"c2f3","label":"发送每个时间窗口中的最后一个值","options":["af15","961d"]},"c65e":{"id":"c65e","label":"debounce","path":"api/operators/debounce","docType":"function"},"4ddc":{"id":"4ddc","label":"此平静的间隔阈值由另一个 Observable 决定","options":["c65e"]},"31a9":{"id":"31a9","label":"debounceTime","path":"api/operators/debounceTime","docType":"function"},"3bf7":{"id":"3bf7","label":"此平静的间隔阈值是根据某个时长决定的","options":["31a9"]},"2da1":{"id":"2da1","label":"等足够平静时就发送最后一个值","options":["4ddc","3bf7"]},"2db0":{"id":"2db0","label":"发生的过于频繁","options":["c1cd","c2f3","2da1"]},"f8ee":{"id":"f8ee","label":"我要忽略某些值","options":["58fb","1a90","654a","5a79","19fe","2db0"]},"c8ea":{"id":"c8ea","label":"reduce","path":"api/operators/reduce","docType":"function"},"8cb1":{"id":"8cb1","label":"scan","path":"api/operators/scan","docType":"function"},"cc6a":{"id":"cc6a","label":"并且每当来源发送某个值时就输出计算好的值","options":["8cb1"]},"368a":{"id":"368a","label":"mergeScan","path":"api/operators/mergeScan","docType":"function"},"7aa8":{"id":"7aa8","label":"switchScan","path":"api/operators/switchScan","docType":"function"},"619f":{"id":"619f","label":"并且每当来源发送某个值时，就把计算好的值输出为一个嵌套 Observable，同时取消对前一个嵌套 Observable 的订阅","options":["7aa8"]},"727f":{"id":"727f","label":"materialize","path":"api/operators/materialize","docType":"function"},"a6ee":{"id":"a6ee","label":"此元数据描述每个通知（next、error 或 complete）","options":["727f"]},"27ea":{"id":"27ea","label":"timeInterval","path":"api/operators/timeInterval","docType":"function"},"f2a3":{"id":"f2a3","label":"次元数据包含从最后一次发送值开始已过去时间","options":["27ea"]},"e889":{"id":"e889","label":"我要用元数据包装它的各个消息","options":["a6ee","f2a3"]},"c1dc":{"id":"c1dc","label":"timeout","path":"api/operators/timeout","docType":"function"},"7c28":{"id":"7c28","label":"我要抛出一个错误","options":["c1dc"]},"ab1b":{"id":"ab1b","label":"timeoutWith"},"8b58":{"id":"8b58","label":"我要切换到另一个 Observable","options":["ab1b"]},"3e2e":{"id":"3e2e","label":"在某个非交互式间隔之后","options":["7c28","8b58"]},"1a94":{"id":"1a94","label":"single","path":"api/operators/single","docType":"function"},"6e92":{"id":"6e92","label":"我要确保只有一个值","options":["1a94"]},"e188":{"id":"e188","label":"count","path":"api/operators/count","docType":"function"},"99c7":{"id":"99c7","label":"我要知道它发送了多少个值","options":["e188"]},"25c5":{"id":"25c5","label":"startWith","path":"api/operators/startWith","docType":"function"},"ecf1":{"id":"ecf1","label":"我要在开头放一个值","options":["25c5"]},"6e65":{"id":"6e65","label":"delay","path":"api/operators/delay","docType":"function"},"c0c2":{"id":"c0c2","label":"基于给定的时间","options":["6e65"]},"8de1":{"id":"8de1","label":"delayWhen","path":"api/operators/delayWhen","docType":"function"},"ef4b":{"id":"ef4b","label":"基于另一个 Observable 的发送情况","options":["8de1"]},"59e6":{"id":"59e6","label":"我要延迟后再发送","options":["c0c2","ef4b"]},"4b62":{"id":"4b62","label":"toArray","path":"api/operators/toArray","docType":"function"},"ac40":{"id":"ac40","label":"Observable","path":"api/index/class/Observable","docType":"class","method":"toPromise"},"18e8":{"id":"18e8","label":"并且转换为 Promise","options":["ac40"]},"55d9":{"id":"55d9","label":"直到此 Observable 完成","options":["7290","18e8"]},"f7e1":{"id":"f7e1","label":"pairwise","path":"api/operators/pairwise","docType":"function"},"9d4c":{"id":"9d4c","label":"连续配对，作为数组","options":["f7e1"]},"6bd8":{"id":"6bd8","label":"partition","path":"api/index/function/partition","docType":"function"},"70a2":{"id":"70a2","label":"基于某种标准，并且输出两个 Observable：那些符合此标准的，和不符合此标准的","options":["6bd8"]},"21ac":{"id":"21ac","label":"bufferCount","path":"api/operators/bufferCount","docType":"function"},"13d3":{"id":"13d3","label":"并且把分好的组以数组形式发送","options":["21ac"]},"8f13":{"id":"8f13","label":"windowCount","path":"api/operators/windowCount","docType":"function"},"e8a3":{"id":"e8a3","label":"根据特定大小的批次","options":["13d3","5719"]},"18a2":{"id":"18a2","label":"bufferTime","path":"api/operators/bufferTime","docType":"function"},"77b4":{"id":"77b4","label":"并且把分好的组以数组的形式发送","options":["18a2"]},"5ca8":{"id":"5ca8","label":"windowTime","path":"api/operators/windowTime","docType":"function"},"d6f8":{"id":"d6f8","label":"并且把分好的组以嵌套 Observable 的形式发送","options":["5ca8"]},"bbcd":{"id":"bbcd","label":"基于时间","options":["77b4","d6f8"]},"1d02":{"id":"1d02","label":"buffer","path":"api/operators/buffer","docType":"function"},"2dea":{"id":"2dea","label":"并且把分好的组以数组的形式发送","options":["1d02"]},"d5d4":{"id":"d5d4","label":"并且把分好的组以嵌套 Observable 的形式发送","options":["4427"]},"af6c":{"id":"af6c","label":"直到另一个 Observable 发送了值","options":["2dea","d5d4"]},"0750":{"id":"0750","label":"bufferWhen","path":"api/operators/bufferWhen","docType":"function"},"611e":{"id":"611e","label":"并且把分好的组以数组的形式发送","options":["0750"]},"d28f":{"id":"d28f","label":"并且把分好的组以嵌套 Observable 的形式发送","options":["4839"]},"643e":{"id":"643e","label":"基于某个按需创建的 Observable 的发送情况","options":["611e","d28f"]},"67f7":{"id":"67f7","label":"bufferToggle","path":"api/operators/bufferToggle","docType":"function"},"5dc0":{"id":"5dc0","label":"并且把分好的组以数组的形式发送","options":["67f7"]},"f6c7":{"id":"f6c7","label":"我还没有任何 Observable，并且","options":["9879","9a75"]},"d769":{"id":"d769","label":"并且把分好的组以嵌套 Observable 的形式发送","options":["f6c7"]},"9f86":{"id":"9f86","label":"基于另一个 Observable 开始一组，并基于第三个 Observable 结束这一组","options":["5dc0","d769"]},"596e":{"id":"596e","label":"groupBy","path":"api/operators/groupBy","docType":"function"},"aca5":{"id":"aca5","label":"基于根据已发送的值计算出的一个键","options":["596e"]},"bc50":{"id":"bc50","label":"我要对这些值进行分组","options":["55d9","9d4c","70a2","e8a3","bbcd","af6c","643e","9f86","aca5"]},"cd89":{"id":"cd89","label":"mergeMapTo"},"cf37":{"id":"cf37","label":"这里的嵌套 Observable 对每个值都是一样的","options":["cd89"]},"0f02":{"id":"0f02","label":"mergeMap","path":"api/operators/mergeMap","docType":"function"},"9cff":{"id":"9cff","label":"这里的嵌套 Observable 是根据每个值现计算的","options":["0f02"]},"85f8":{"id":"85f8","label":"并且并行发送全部嵌套 Observable 所发送的值","options":["cf37","9cff"]},"02aa":{"id":"02aa","label":"concatMapTo"},"9d6b":{"id":"9d6b","label":"这里的嵌套 Observable 对每个值都是一样的","options":["02aa"]},"092f":{"id":"092f","label":"concatMap","path":"api/operators/concatMap","docType":"function"},"252e":{"id":"252e","label":"这里的嵌套 Observable 是根据每个值现计算的","options":["092f"]},"a109":{"id":"a109","label":"并且依次发送每个嵌套 Observable 所发送的值","options":["9d6b","252e"]},"e0f0":{"id":"e0f0","label":"switchMapTo"},"37fb":{"id":"37fb","label":"这里的嵌套 Observable 对每个值都是一样的","options":["e0f0"]},"9b2b":{"id":"9b2b","label":"switchMap","path":"api/operators/switchMap","docType":"function"},"e949":{"id":"e949","label":"这里的嵌套 Observable 是根据每个值现计算的","options":["9b2b"]},"7bee":{"id":"7bee","label":"并且当新值抵达时，取消前一个嵌套 Observable","options":["37fb","e949"]},"6e86":{"id":"6e86","label":"exhaustMap","path":"api/operators/exhaustMap","docType":"function"},"9a9b":{"id":"9a9b","label":"并且即使当前的嵌套 Observable 尚未完结，也要忽略进来的值","options":["6e86"]},"58a5":{"id":"58a5","label":"并且对每一个新值递归启动一个新的 Observable","options":["5742"]},"0022":{"id":"0022","label":"我要为每个值开始一个新的 Observable","options":["85f8","a109","7bee","9a9b","58a5"]},"e6fc":{"id":"e6fc","label":"pipe","path":"api/index/function/pipe","docType":"function"},"beb8":{"id":"beb8","label":"我要执行自定义操作","options":["e6fc"]},"7dae":{"id":"7dae","label":"并且在第一个订阅者抵达时尽快启动","options":["9171"]},"0a47":{"id":"0a47","label":"publish"},"56ef":{"id":"56ef","label":"使用常规 Subject","options":["7dae","1677"]},"9bec":{"id":"9bec","label":"publishBehavior"},"d477":{"id":"d477","label":"使用 BehaviorSubject","options":["9bec"]},"637c":{"id":"637c","label":"publishReplay"},"27d8":{"id":"27d8","label":"使用 ReplaySubject","options":["637c"]},"2bac":{"id":"2bac","label":"publishLast"},"ceeb":{"id":"ceeb","label":"multicast"},"1a97":{"id":"1a97","label":"使用某种特殊的 Subject 实现","options":["ceeb"]},"f5ef":{"id":"f5ef","label":"我要在多个订阅者之间共享某个订阅","options":["56ef","d477","27d8","4007","1a97"]},"ef3d":{"id":"ef3d","label":"catchError","path":"api/operators/catchError","docType":"function"},"00e4":{"id":"00e4","label":"我要启动一个新的 Observable","options":["ef3d"]},"af67":{"id":"af67","label":"立即","options":["2073"]},"e04f":{"id":"e04f","label":"retryWhen"},"f3c9":{"id":"f3c9","label":"当另一个 Observable 发送值的时候","options":["e04f"]},"4a85":{"id":"4a85","label":"当发生错误时","options":["00e4","4495"]},"cebd":{"id":"cebd","label":"立即","options":["2464"]},"b9c0":{"id":"b9c0","label":"repeatWhen"},"77cc":{"id":"77cc","label":"当另一个 Observable 发送值的时候","options":["b9c0"]},"90b9":{"id":"90b9","label":"我要重新订阅","options":["cebd","77cc"]},"a116":{"id":"a116","label":"concat","path":"api/index/function/concat","docType":"function"},"d3e7":{"id":"d3e7","label":"我要启动一个新的 Observable","options":["a116"]},"f253":{"id":"f253","label":"当它完成时","options":["90b9","d3e7"]},"b8ab":{"id":"b8ab","label":"finalize","path":"api/operators/finalize","docType":"function"},"acc9":{"id":"acc9","label":"当它完成、出错或退订时，我要执行某个函数","options":["b8ab"]},"65e6":{"id":"65e6","label":"subscribeOn","path":"api/operators/subscribeOn","docType":"function"},"f761":{"id":"f761","label":"它会修改从调用到订阅之间的路由","options":["65e6"]},"d8f0":{"id":"d8f0","label":"observeOn","path":"api/operators/observeOn","docType":"function"},"0622":{"id":"0622","label":"它会修改从发送值到 Observer 之间的路由","options":["d8f0"]},"919e":{"id":"919e","label":"我要更改调度器（Scheduler）","options":["f761","0622"]},"9fe0":{"id":"9fe0","label":"race","path":"api/index/function/race","docType":"function"},"df52":{"id":"df52","label":"merge","path":"api/operators/merge","docType":"function"},"3c7a":{"id":"3c7a","label":"我要输出所有值，而不管是从哪一个发送的","options":["df52"]},"4e0e":{"id":"4e0e","label":"当任何一个来源发送值的时候，使用每个来源发送的最后一个值","options":["9961"]},"4d08":{"id":"4d08","label":"withLatestFrom","path":"api/operators/withLatestFrom","docType":"function"},"dd11":{"id":"dd11","label":"仅当主 Observable 发送值的时候，使用每个来源发送的最后一个值","options":["4d08"]},"8fa0":{"id":"8fa0","label":"zip","path":"api/index/function/zip","docType":"function"},"65fd":{"id":"65fd","label":"我要输出根据源 Observer 发送的值计算出来的某个值","options":["4e0e","dd11","4542"]},"71fa":{"id":"71fa","label":"我要把这个 Observable 和其它的合并，并且","options":["4181","3c7a","65fd"]},"0733":{"id":"0733","label":"我已经有一个 Observable，并且","options":["2c60","6099","7c88","63fd","f8ee","2140","e889","3e2e","6e92","99c7","ecf1","59e6","bc50","0022","beb8","f5ef","4a85","f253","acc9","919e","71fa"]},"c496":{"id":"c496","label":"race","path":"api/index/function/race","docType":"function"},"a421":{"id":"a421","label":"我只想从首先发送值的 Observable 接收各个值","options":["c496"]},"6f5d":{"id":"6f5d","label":"forkJoin","path":"api/index/function/forkJoin","docType":"function"},"d3c9":{"id":"d3c9","label":"我想在它们全都完成时得到通知","options":["6f5d"]},"df59":{"id":"df59","label":"merge","path":"api/operators/merge","docType":"function"},"3a61":{"id":"3a61","label":"我要输出所有值，而不管是从哪一个发送的","options":["df59"]},"047a":{"id":"047a","label":"当任何一个来源发送值的时候，使用每个来源发送的最后一个值","options":["8413"]},"3e04":{"id":"3e04","label":"zip","path":"api/index/function/zip","docType":"function"},"eb71":{"id":"eb71","label":"每个来源中的每个值仅使用一次","options":["3e04"]},"65cd":{"id":"65cd","label":"concat","path":"api/index/function/concat","docType":"function"},"e314":{"id":"e314","label":"我要依次订阅它们","options":["65cd"]},"0609":{"id":"0609","label":"我已经有了由某些 Observable 组合成的单一 Observable，并且","options":["a421","d3c9","3a61","2869","e314"]},"b860":{"id":"b860","label":"Observable","path":"api/index/class/Observable","docType":"class","method":"create"},"d49e":{"id":"d49e","label":"使用自定义逻辑","options":["b860"]},"b197":{"id":"b197","label":"generate","path":"api/index/function/generate","docType":"function"},"6fff":{"id":"6fff","label":"使用一个类似于 for 循环的状态机","options":["b197"]},"c3e9":{"id":"c3e9","label":"throwError","path":"api/index/function/throwError","docType":"function"},"65c5":{"id":"65c5","label":"抛出一个错误","options":["c3e9"]},"4b12":{"id":"4b12","label":"只完成它，而不发送任何值","options":["3627"]},"a9e3":{"id":"a9e3","label":"NEVER","path":"api/index/const/NEVER","docType":"const"},"d40e":{"id":"d40e","label":"永远不会发送任何东西","options":["a9e3"]},"0a2b":{"id":"0a2b","label":"fromEvent","path":"api/index/function/fromEvent","docType":"function"},"f684":{"id":"f684","label":"来自 DOM 或 Node.js 或类似的东西","options":["0a2b"]},"bd43":{"id":"bd43","label":"fromEventPattern","path":"api/index/function/fromEventPattern","docType":"function"},"485c":{"id":"485c","label":"它使用某个 API 来添加或移除事件处理器","options":["bd43"]},"3e95":{"id":"3e95","label":"从一个现有的事件源","options":["f684","485c"]},"d63a":{"id":"d63a","label":"from","path":"api/index/function/from","docType":"function"},"e9f1":{"id":"e9f1","label":"来自某个 Promise 或事件源","options":["d63a"]},"0d04":{"id":"0d04","label":"针对某个数组中的那些值","options":["9482"]},"eb57":{"id":"eb57","label":"range","path":"api/index/function/range","docType":"function"},"18a3":{"id":"18a3","label":"针对某个数字范围内的那些值","options":["eb57"]},"f022":{"id":"f022","label":"of","path":"api/index/function/of","docType":"function"},"e225":{"id":"e225","label":"针对通过参数给出的那些值","options":["f022"]},"edc8":{"id":"edc8","label":"它是可迭代者","options":["0d04","18a3","e225"]},"32bc":{"id":"32bc","label":"interval","path":"api/index/function/interval","docType":"function"},"490d":{"id":"490d","label":"均匀的","options":["32bc"]},"804f":{"id":"804f","label":"timer","path":"api/index/function/timer","docType":"function"},"d3dd":{"id":"d3dd","label":"它基于定时器发送一些值","options":["490d","8461"]},"d745":{"id":"d745","label":"defer","path":"api/index/function/defer","docType":"function"},"0b0c":{"id":"0b0c","label":"它在被订阅时才按需创建","options":["d745"]},"796d":{"id":"796d","label":"bindCallback","path":"api/index/function/bindCallback","docType":"function"},"474f":{"id":"474f","label":"支持常规的回调 API","options":["796d"]},"589c":{"id":"589c","label":"bindNodeCallback","path":"api/index/function/bindNodeCallback","docType":"function"},"014a":{"id":"014a","label":"支持 Node.js 风格的回调 API","options":["589c"]},"9a75":{"id":"9a75","label":"我要把某个回调函数转换为 Observable","options":["474f","014a"]},"initial":{"id":"initial","options":["0733","0609","f6c7"]}}