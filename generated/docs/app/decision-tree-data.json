{"1429":{"id":"1429","label":"如果它们精确的处于第 n 位","options":["a722"]},"1472":{"id":"1472","label":"scan","path":"api/operators/scan","docType":"function"},"1612":{"id":"1612","label":"此平静的间隔阈值由另一个 Observable 决定","options":["0f9e"]},"1752":{"id":"1752","label":"并且每当来源发送某个值时，就把计算好的值输出为一个嵌套 Observable，同时取消对前一个嵌套 Observable 的订阅","options":["0674"]},"1836":{"id":"1836","label":"tap","path":"api/operators/tap","docType":"function"},"3020":{"id":"3020","label":"这里的嵌套 Observable 是根据每个值现计算的","options":["60ac"]},"3054":{"id":"3054","label":"我要切换到另一个 Observable","options":["b505"]},"3233":{"id":"3233","label":"抛出一个错误","options":["22f2"]},"3276":{"id":"3276","label":"此元数据描述每个通知（next、error 或 complete）","options":["90d2"]},"3530":{"id":"3530","label":"全部","options":["e880"]},"3646":{"id":"3646","label":"我要输出所有值，而不管是从哪一个发送的","options":["4870"]},"4051":{"id":"4051","label":"range","path":"api/index/function/range","docType":"function"},"4101":{"id":"4101","label":"我想在它们全都完成时得到通知","options":["1f45"]},"4510":{"id":"4510","label":"publishReplay"},"4546":{"id":"4546","label":"retryWhen"},"4650":{"id":"4650","label":"我要为每个值开始一个新的 Observable","options":["ad62","25c8","f265","d505","d9a3"]},"4870":{"id":"4870","label":"merge","path":"api/operators/merge","docType":"function"},"5656":{"id":"5656","label":"我要输出根据源 Observer 发送的值计算出来的某个值","options":["31ca","e3b8","7801"]},"6024":{"id":"6024","label":"它会修改从发送值到 Observer 之间的路由","options":["d622"]},"6319":{"id":"6319","label":"从一个现有的事件源","options":["fd66","985a"]},"6510":{"id":"6510","label":"发送每个时间窗口中的最后一个值","options":["d4e1","fa7f"]},"6899":{"id":"6899","label":"partition","path":"api/index/function/partition","docType":"function"},"7190":{"id":"7190","label":"立即","options":["4ddc"]},"7418":{"id":"7418","label":"count","path":"api/operators/count","docType":"function"},"7639":{"id":"7639","label":"NEVER","path":"api/index/const/NEVER","docType":"const"},"7801":{"id":"7801","label":"每个来源中的每个值仅使用一次","options":["3b1d"]},"8633":{"id":"8633","label":"from","path":"api/index/function/from","docType":"function"},"f113":{"id":"f113","label":"mapTo"},"3cc8":{"id":"3cc8","label":"一个常量值","options":["f113"]},"6d09":{"id":"6d09","label":"map","path":"api/operators/map","docType":"function"},"b12d":{"id":"b12d","label":"一个通过公式算出来的值","options":["6d09"]},"f578":{"id":"f578","label":"我要把它发送的每个值改成","options":["3cc8","b12d"]},"4adb":{"id":"4adb","label":"pluck"},"27b7":{"id":"27b7","label":"我要从它发送的每个值中取出一个属性","options":["4adb"]},"a807":{"id":"a807","label":"我要监听即将发送的值，但不想影响它们","options":["1836"]},"eb08":{"id":"eb08","label":"filter","path":"api/operators/filter","docType":"function"},"bcc5":{"id":"bcc5","label":"基于自定义逻辑","options":["eb08"]},"20bf":{"id":"20bf","label":"first","path":"api/operators/first","docType":"function"},"b556":{"id":"b556","label":"并且只要第一个值","options":["20bf"]},"fdda":{"id":"fdda","label":"take","path":"api/operators/take","docType":"function"},"b74c":{"id":"b74c","label":"基于给定的数量","options":["fdda"]},"3f52":{"id":"3f52","label":"takeWhile","path":"api/operators/takeWhile","docType":"function"},"3eda":{"id":"3eda","label":"基于自定义逻辑","options":["3f52"]},"75ea":{"id":"75ea","label":"如果它们位于此 Observable 的首部","options":["b556","b74c","3eda"]},"a722":{"id":"a722","label":"elementAt","path":"api/operators/elementAt","docType":"function"},"e2cc":{"id":"e2cc","label":"last","path":"api/operators/last","docType":"function"},"ca71":{"id":"ca71","label":"并且只要最后一个值","options":["e2cc"]},"3b29":{"id":"3b29","label":"takeLast","path":"api/operators/takeLast","docType":"function"},"e1d9":{"id":"e1d9","label":"基于给定的数量","options":["3b29"]},"0fa2":{"id":"0fa2","label":"如果它们位于此 Observable 的尾部","options":["ca71","e1d9"]},"f248":{"id":"f248","label":"takeUntil","path":"api/operators/takeUntil","docType":"function"},"d743":{"id":"d743","label":"直到另一个 Observable 发送了值","options":["f248"]},"1d8d":{"id":"1d8d","label":"我要只允许部分值通过","options":["bcc5","75ea","1429","0fa2","d743"]},"e880":{"id":"e880","label":"ignoreElements","path":"api/operators/ignoreElements","docType":"function"},"1c1d":{"id":"1c1d","label":"skip","path":"api/operators/skip","docType":"function"},"7d2d":{"id":"7d2d","label":"基于给定的数量","options":["1c1d"]},"6b3e":{"id":"6b3e","label":"skipWhile","path":"api/operators/skipWhile","docType":"function"},"57a8":{"id":"57a8","label":"基于自定义逻辑","options":["6b3e"]},"19a6":{"id":"19a6","label":"从此 Observable 的首部","options":["7d2d","57a8"]},"ee7b":{"id":"ee7b","label":"skipLast","path":"api/operators/skipLast","docType":"function"},"ad1d":{"id":"ad1d","label":"从此 Observable 的尾部","options":["ee7b"]},"b0fe":{"id":"b0fe","label":"skipUntil","path":"api/operators/skipUntil","docType":"function"},"907d":{"id":"907d","label":"直到另一个 Observable 发送了值","options":["b0fe"]},"cfbd":{"id":"cfbd","label":"distinctUntilChanged","path":"api/operators/distinctUntilChanged","docType":"function"},"6e70":{"id":"6e70","label":"发送恰好在当前值前面的那个","options":["cfbd"]},"f5c7":{"id":"f5c7","label":"distinct","path":"api/operators/distinct","docType":"function"},"2df5":{"id":"2df5","label":"以前任何时候曾发送过","options":["f5c7"]},"cccb":{"id":"cccb","label":"根据值是否相等","options":["6e70","2df5"]},"fb98":{"id":"fb98","label":"distinctUntilKeyChanged","path":"api/operators/distinctUntilKeyChanged","docType":"function"},"3a24":{"id":"3a24","label":"发送恰好在当前值前面的那个","options":["fb98"]},"ed0e":{"id":"ed0e","label":"根据一个某个键或对象属性","options":["3a24"]},"f4cf":{"id":"f4cf","label":"与某些以前发送的值匹配","options":["cccb","ed0e"]},"c58d":{"id":"c58d","label":"throttle","path":"api/operators/throttle","docType":"function"},"c9e6":{"id":"c9e6","label":"这个时间窗口是基于另一个 Observable 的发送情况","options":["c58d"]},"5d47":{"id":"5d47","label":"throttleTime","path":"api/operators/throttleTime","docType":"function"},"b9dd":{"id":"b9dd","label":"这个时间窗口是根据某个时长来决定的","options":["5d47"]},"d969":{"id":"d969","label":"发送每个时间窗口中的第一个值","options":["c9e6","b9dd"]},"5d8f":{"id":"5d8f","label":"audit","path":"api/operators/audit","docType":"function"},"d4e1":{"id":"d4e1","label":"这个时间窗口是基于另一个 Observable 的发送情况","options":["5d8f"]},"72ea":{"id":"72ea","label":"auditTime","path":"api/operators/auditTime","docType":"function"},"fa7f":{"id":"fa7f","label":"这个时间窗口是根据某个时长来决定的","options":["72ea"]},"0f9e":{"id":"0f9e","label":"debounce","path":"api/operators/debounce","docType":"function"},"1bb5":{"id":"1bb5","label":"debounceTime","path":"api/operators/debounceTime","docType":"function"},"24e1":{"id":"24e1","label":"此平静的间隔阈值是根据某个时长决定的","options":["1bb5"]},"f197":{"id":"f197","label":"等足够平静时就发送最后一个值","options":["1612","24e1"]},"02e7":{"id":"02e7","label":"发生的过于频繁","options":["d969","6510","f197"]},"b77e":{"id":"b77e","label":"我要忽略某些值","options":["3530","19a6","ad1d","907d","f4cf","02e7"]},"d655":{"id":"d655","label":"reduce","path":"api/operators/reduce","docType":"function"},"0bf4":{"id":"0bf4","label":"并且只输出最终计算出的值","options":["d655"]},"c3db":{"id":"c3db","label":"并且每当来源发送某个值时就输出计算好的值","options":["1472"]},"71af":{"id":"71af","label":"mergeScan","path":"api/operators/mergeScan","docType":"function"},"4a4c":{"id":"4a4c","label":"并且当来源发送某个值时，就把计算好的值输出为一个嵌套 Observable","options":["71af"]},"0674":{"id":"0674","label":"switchScan","path":"api/operators/switchScan","docType":"function"},"7de2":{"id":"7de2","label":"我要使用已发送的所有值做某种计算","options":["0bf4","c3db","4a4c","1752"]},"90d2":{"id":"90d2","label":"materialize","path":"api/operators/materialize","docType":"function"},"dfc5":{"id":"dfc5","label":"timeInterval","path":"api/operators/timeInterval","docType":"function"},"1ee8":{"id":"1ee8","label":"次元数据包含从最后一次发送值开始已过去时间","options":["dfc5"]},"ac2d":{"id":"ac2d","label":"我要用元数据包装它的各个消息","options":["3276","1ee8"]},"bd4f":{"id":"bd4f","label":"timeout","path":"api/operators/timeout","docType":"function"},"0ace":{"id":"0ace","label":"我要抛出一个错误","options":["bd4f"]},"b505":{"id":"b505","label":"timeoutWith"},"cafe":{"id":"cafe","label":"在某个非交互式间隔之后","options":["0ace","3054"]},"cad9":{"id":"cad9","label":"single","path":"api/operators/single","docType":"function"},"5bdf":{"id":"5bdf","label":"我要确保只有一个值","options":["cad9"]},"1d40":{"id":"1d40","label":"我要知道它发送了多少个值","options":["7418"]},"634b":{"id":"634b","label":"startWith","path":"api/operators/startWith","docType":"function"},"dec8":{"id":"dec8","label":"我要在开头放一个值","options":["634b"]},"11c3":{"id":"11c3","label":"delay","path":"api/operators/delay","docType":"function"},"60e8":{"id":"60e8","label":"基于给定的时间","options":["11c3"]},"696a":{"id":"696a","label":"delayWhen","path":"api/operators/delayWhen","docType":"function"},"4bc3":{"id":"4bc3","label":"基于另一个 Observable 的发送情况","options":["696a"]},"f6fd":{"id":"f6fd","label":"我要延迟后再发送","options":["60e8","4bc3"]},"b79e":{"id":"b79e","label":"toArray","path":"api/operators/toArray","docType":"function"},"f7e1":{"id":"f7e1","label":"并转换为数组","options":["b79e"]},"2d96":{"id":"2d96","label":"Observable","path":"api/index/class/Observable","docType":"class","method":"toPromise"},"dbb1":{"id":"dbb1","label":"并且转换为 Promise","options":["2d96"]},"2b6d":{"id":"2b6d","label":"直到此 Observable 完成","options":["f7e1","dbb1"]},"8c69":{"id":"8c69","label":"pairwise","path":"api/operators/pairwise","docType":"function"},"c771":{"id":"c771","label":"连续配对，作为数组","options":["8c69"]},"a79f":{"id":"a79f","label":"基于某种标准，并且输出两个 Observable：那些符合此标准的，和不符合此标准的","options":["6899"]},"5e3d":{"id":"5e3d","label":"bufferCount","path":"api/operators/bufferCount","docType":"function"},"a22e":{"id":"a22e","label":"并且把分好的组以数组形式发送","options":["5e3d"]},"79c7":{"id":"79c7","label":"windowCount","path":"api/operators/windowCount","docType":"function"},"b067":{"id":"b067","label":"并且把分好的组以嵌套 Observable 的形式发送","options":["79c7"]},"599a":{"id":"599a","label":"根据特定大小的批次","options":["a22e","b067"]},"1ff6":{"id":"1ff6","label":"bufferTime","path":"api/operators/bufferTime","docType":"function"},"deeb":{"id":"deeb","label":"并且把分好的组以数组的形式发送","options":["1ff6"]},"7ed9":{"id":"7ed9","label":"windowTime","path":"api/operators/windowTime","docType":"function"},"a64d":{"id":"a64d","label":"并且把分好的组以嵌套 Observable 的形式发送","options":["7ed9"]},"72ee":{"id":"72ee","label":"基于时间","options":["deeb","a64d"]},"1c47":{"id":"1c47","label":"buffer","path":"api/operators/buffer","docType":"function"},"73d4":{"id":"73d4","label":"并且把分好的组以数组的形式发送","options":["1c47"]},"bf0d":{"id":"bf0d","label":"window","path":"api/operators/window","docType":"function"},"f8c0":{"id":"f8c0","label":"并且把分好的组以嵌套 Observable 的形式发送","options":["bf0d"]},"8b8b":{"id":"8b8b","label":"直到另一个 Observable 发送了值","options":["73d4","f8c0"]},"58f0":{"id":"58f0","label":"bufferWhen","path":"api/operators/bufferWhen","docType":"function"},"13b7":{"id":"13b7","label":"并且把分好的组以数组的形式发送","options":["58f0"]},"0382":{"id":"0382","label":"windowWhen","path":"api/operators/windowWhen","docType":"function"},"d393":{"id":"d393","label":"并且把分好的组以嵌套 Observable 的形式发送","options":["0382"]},"c1fc":{"id":"c1fc","label":"基于某个按需创建的 Observable 的发送情况","options":["13b7","d393"]},"e61c":{"id":"e61c","label":"bufferToggle","path":"api/operators/bufferToggle","docType":"function"},"4d7b":{"id":"4d7b","label":"并且把分好的组以数组的形式发送","options":["e61c"]},"b6c7":{"id":"b6c7","label":"windowToggle","path":"api/operators/windowToggle","docType":"function"},"b8c0":{"id":"b8c0","label":"并且把分好的组以嵌套 Observable 的形式发送","options":["b6c7"]},"ab87":{"id":"ab87","label":"基于另一个 Observable 开始一组，并基于第三个 Observable 结束这一组","options":["4d7b","b8c0"]},"955a":{"id":"955a","label":"groupBy","path":"api/operators/groupBy","docType":"function"},"ac9a":{"id":"ac9a","label":"基于根据已发送的值计算出的一个键","options":["955a"]},"381b":{"id":"381b","label":"我要对这些值进行分组","options":["2b6d","c771","a79f","599a","72ee","8b8b","c1fc","ab87","ac9a"]},"97fe":{"id":"97fe","label":"mergeMapTo"},"f7ad":{"id":"f7ad","label":"这里的嵌套 Observable 对每个值都是一样的","options":["97fe"]},"8af5":{"id":"8af5","label":"mergeMap","path":"api/operators/mergeMap","docType":"function"},"af17":{"id":"af17","label":"这里的嵌套 Observable 是根据每个值现计算的","options":["8af5"]},"ad62":{"id":"ad62","label":"并且并行发送全部嵌套 Observable 所发送的值","options":["f7ad","af17"]},"e5d9":{"id":"e5d9","label":"concatMapTo"},"1b89":{"id":"1b89","label":"这里的嵌套 Observable 对每个值都是一样的","options":["e5d9"]},"60ac":{"id":"60ac","label":"concatMap","path":"api/operators/concatMap","docType":"function"},"25c8":{"id":"25c8","label":"并且依次发送每个嵌套 Observable 所发送的值","options":["1b89","3020"]},"38dc":{"id":"38dc","label":"switchMapTo"},"be1d":{"id":"be1d","label":"这里的嵌套 Observable 对每个值都是一样的","options":["38dc"]},"cc63":{"id":"cc63","label":"switchMap","path":"api/operators/switchMap","docType":"function"},"0bcb":{"id":"0bcb","label":"这里的嵌套 Observable 是根据每个值现计算的","options":["cc63"]},"f265":{"id":"f265","label":"并且当新值抵达时，取消前一个嵌套 Observable","options":["be1d","0bcb"]},"ee40":{"id":"ee40","label":"exhaustMap","path":"api/operators/exhaustMap","docType":"function"},"d505":{"id":"d505","label":"并且即使当前的嵌套 Observable 尚未完结，也要忽略进来的值","options":["ee40"]},"1bc3":{"id":"1bc3","label":"expand","path":"api/operators/expand","docType":"function"},"d9a3":{"id":"d9a3","label":"并且对每一个新值递归启动一个新的 Observable","options":["1bc3"]},"cc42":{"id":"cc42","label":"pipe","path":"api/index/function/pipe","docType":"function"},"baf3":{"id":"baf3","label":"我要执行自定义操作","options":["cc42"]},"b8cb":{"id":"b8cb","label":"share","path":"api/operators/share","docType":"function"},"9b43":{"id":"9b43","label":"并且在第一个订阅者抵达时尽快启动","options":["b8cb"]},"8dac":{"id":"8dac","label":"publish"},"68c1":{"id":"68c1","label":"并且手动或用程序启动它","options":["8dac"]},"37b0":{"id":"37b0","label":"使用常规 Subject","options":["9b43","68c1"]},"15f5":{"id":"15f5","label":"publishBehavior"},"86a8":{"id":"86a8","label":"使用 BehaviorSubject","options":["15f5"]},"af9c":{"id":"af9c","label":"使用 ReplaySubject","options":["4510"]},"cef4":{"id":"cef4","label":"publishLast"},"f411":{"id":"f411","label":"使用 AsyncSubject","options":["cef4"]},"0f1d":{"id":"0f1d","label":"multicast"},"f98e":{"id":"f98e","label":"使用某种特殊的 Subject 实现","options":["0f1d"]},"de8b":{"id":"de8b","label":"我要在多个订阅者之间共享某个订阅","options":["37b0","86a8","af9c","f411","f98e"]},"c811":{"id":"c811","label":"catchError","path":"api/operators/catchError","docType":"function"},"93d1":{"id":"93d1","label":"我要启动一个新的 Observable","options":["c811"]},"4ddc":{"id":"4ddc","label":"retry","path":"api/operators/retry","docType":"function"},"1fb5":{"id":"1fb5","label":"当另一个 Observable 发送值的时候","options":["4546"]},"5c90":{"id":"5c90","label":"我要重新订阅","options":["7190","1fb5"]},"29c7":{"id":"29c7","label":"当发生错误时","options":["93d1","5c90"]},"c0f2":{"id":"c0f2","label":"repeat","path":"api/operators/repeat","docType":"function"},"847c":{"id":"847c","label":"立即","options":["c0f2"]},"24f2":{"id":"24f2","label":"repeatWhen"},"8e00":{"id":"8e00","label":"当另一个 Observable 发送值的时候","options":["24f2"]},"a0aa":{"id":"a0aa","label":"我要重新订阅","options":["847c","8e00"]},"fd90":{"id":"fd90","label":"concat","path":"api/index/function/concat","docType":"function"},"03ee":{"id":"03ee","label":"我要启动一个新的 Observable","options":["fd90"]},"98c6":{"id":"98c6","label":"当它完成时","options":["a0aa","03ee"]},"b6e4":{"id":"b6e4","label":"finalize","path":"api/operators/finalize","docType":"function"},"b283":{"id":"b283","label":"当它完成、出错或退订时，我要执行某个函数","options":["b6e4"]},"bc4a":{"id":"bc4a","label":"subscribeOn","path":"api/operators/subscribeOn","docType":"function"},"aa8f":{"id":"aa8f","label":"它会修改从调用到订阅之间的路由","options":["bc4a"]},"d622":{"id":"d622","label":"observeOn","path":"api/operators/observeOn","docType":"function"},"2aeb":{"id":"2aeb","label":"我要更改调度器（Scheduler）","options":["aa8f","6024"]},"0201":{"id":"0201","label":"race","path":"api/index/function/race","docType":"function"},"ae34":{"id":"ae34","label":"我只想从首先发送值的 Observable 接收各个值","options":["0201"]},"d0de":{"id":"d0de","label":"merge","path":"api/operators/merge","docType":"function"},"8b9e":{"id":"8b9e","label":"我要输出所有值，而不管是从哪一个发送的","options":["d0de"]},"ca5e":{"id":"ca5e","label":"combineLatest","path":"api/index/function/combineLatest","docType":"function"},"31ca":{"id":"31ca","label":"当任何一个来源发送值的时候，使用每个来源发送的最后一个值","options":["ca5e"]},"7bb7":{"id":"7bb7","label":"withLatestFrom","path":"api/operators/withLatestFrom","docType":"function"},"e3b8":{"id":"e3b8","label":"仅当主 Observable 发送值的时候，使用每个来源发送的最后一个值","options":["7bb7"]},"3b1d":{"id":"3b1d","label":"zip","path":"api/index/function/zip","docType":"function"},"bb8f":{"id":"bb8f","label":"我要把这个 Observable 和其它的合并，并且","options":["ae34","8b9e","5656"]},"ee89":{"id":"ee89","label":"我已经有一个 Observable，并且","options":["f578","27b7","a807","1d8d","b77e","7de2","ac2d","cafe","5bdf","1d40","dec8","f6fd","381b","4650","baf3","de8b","29c7","98c6","b283","2aeb","bb8f"]},"772e":{"id":"772e","label":"race","path":"api/index/function/race","docType":"function"},"d915":{"id":"d915","label":"我只想从首先发送值的 Observable 接收各个值","options":["772e"]},"1f45":{"id":"1f45","label":"forkJoin","path":"api/index/function/forkJoin","docType":"function"},"03ff":{"id":"03ff","label":"combineLatest","path":"api/index/function/combineLatest","docType":"function"},"f9ef":{"id":"f9ef","label":"当任何一个来源发送值的时候，使用每个来源发送的最后一个值","options":["03ff"]},"f512":{"id":"f512","label":"zip","path":"api/index/function/zip","docType":"function"},"344d":{"id":"344d","label":"每个来源中的每个值仅使用一次","options":["f512"]},"9bf3":{"id":"9bf3","label":"我要输出根据源 Observer 发送的值计算出来的某个值","options":["f9ef","344d"]},"7c98":{"id":"7c98","label":"concat","path":"api/index/function/concat","docType":"function"},"abf7":{"id":"abf7","label":"我要依次订阅它们","options":["7c98"]},"8d3f":{"id":"8d3f","label":"我已经有了由某些 Observable 组合成的单一 Observable，并且","options":["d915","4101","3646","9bf3","abf7"]},"9e4f":{"id":"9e4f","label":"Observable","path":"api/index/class/Observable","docType":"class","method":"create"},"837e":{"id":"837e","label":"使用自定义逻辑","options":["9e4f"]},"cfa3":{"id":"cfa3","label":"generate","path":"api/index/function/generate","docType":"function"},"5f71":{"id":"5f71","label":"使用一个类似于 for 循环的状态机","options":["cfa3"]},"22f2":{"id":"22f2","label":"throwError","path":"api/index/function/throwError","docType":"function"},"3b93":{"id":"3b93","label":"EMPTY","path":"api/index/const/EMPTY","docType":"const"},"16ff":{"id":"16ff","label":"只完成它，而不发送任何值","options":["3b93"]},"239d":{"id":"239d","label":"永远不会发送任何东西","options":["7639"]},"61f2":{"id":"61f2","label":"fromEvent","path":"api/index/function/fromEvent","docType":"function"},"fd66":{"id":"fd66","label":"来自 DOM 或 Node.js 或类似的东西","options":["61f2"]},"c711":{"id":"c711","label":"fromEventPattern","path":"api/index/function/fromEventPattern","docType":"function"},"985a":{"id":"985a","label":"它使用某个 API 来添加或移除事件处理器","options":["c711"]},"cdad":{"id":"cdad","label":"来自某个 Promise 或事件源","options":["8633"]},"933b":{"id":"933b","label":"from","path":"api/index/function/from","docType":"function"},"522d":{"id":"522d","label":"针对某个数组中的那些值","options":["933b"]},"dc4d":{"id":"dc4d","label":"针对某个数字范围内的那些值","options":["4051"]},"d955":{"id":"d955","label":"of","path":"api/index/function/of","docType":"function"},"228f":{"id":"228f","label":"针对通过参数给出的那些值","options":["d955"]},"9d75":{"id":"9d75","label":"它是可迭代者","options":["522d","dc4d","228f"]},"78ba":{"id":"78ba","label":"interval","path":"api/index/function/interval","docType":"function"},"cb08":{"id":"cb08","label":"均匀的","options":["78ba"]},"665f":{"id":"665f","label":"timer","path":"api/index/function/timer","docType":"function"},"1a9d":{"id":"1a9d","label":"带有一个可选的首次延迟","options":["665f"]},"66c4":{"id":"66c4","label":"它基于定时器发送一些值","options":["cb08","1a9d"]},"9d42":{"id":"9d42","label":"defer","path":"api/index/function/defer","docType":"function"},"7f04":{"id":"7f04","label":"它在被订阅时才按需创建","options":["9d42"]},"f309":{"id":"f309","label":"我要创建一个新的 Observable","options":["837e","5f71","3233","16ff","239d","6319","cdad","9d75","66c4","7f04"]},"1ea0":{"id":"1ea0","label":"bindCallback","path":"api/index/function/bindCallback","docType":"function"},"de57":{"id":"de57","label":"支持常规的回调 API","options":["1ea0"]},"ada0":{"id":"ada0","label":"bindNodeCallback","path":"api/index/function/bindNodeCallback","docType":"function"},"21ed":{"id":"21ed","label":"支持 Node.js 风格的回调 API","options":["ada0"]},"ccbe":{"id":"ccbe","label":"我要把某个回调函数转换为 Observable","options":["de57","21ed"]},"8ee5":{"id":"8ee5","label":"我还没有任何 Observable，并且","options":["f309","ccbe"]},"initial":{"id":"initial","options":["ee89","8d3f","8ee5"]}}