{"1594":{"id":"1594","label":"针对某个数字范围内的那些值","options":["9e48"]},"1694":{"id":"1694","label":"skipWhile","path":"api/operators/skipWhile","docType":"function"},"2157":{"id":"2157","label":"发送恰好在当前值前面的那个","options":["dfbc"]},"3112":{"id":"3112","label":"当它完成、出错或退订时，我要执行某个函数","options":["88e4"]},"3323":{"id":"3323","label":"基于某种标准，并且输出两个 Observable：那些符合此标准的，和不符合此标准的","options":["5183"]},"3417":{"id":"3417","label":"永远不会发送任何东西","options":["7c32"]},"3458":{"id":"3458","label":"timeout","path":"api/operators/timeout","docType":"function"},"3569":{"id":"3569","label":"这里的嵌套 Observable 是根据每个值现计算的","options":["34dd"]},"3604":{"id":"3604","label":"distinctUntilKeyChanged","path":"api/operators/distinctUntilKeyChanged","docType":"function"},"3831":{"id":"3831","label":"fromEvent","path":"api/index/function/fromEvent","docType":"function"},"3916":{"id":"3916","label":"merge","path":"api/operators/merge","docType":"function"},"4028":{"id":"4028","label":"并且把分好的组以数组的形式发送","options":["0840"]},"4505":{"id":"4505","label":"当另一个 Observable 发送值的时候","options":["526b"]},"4655":{"id":"4655","label":"这个时间窗口是基于另一个 Observable 的发送情况","options":["f065"]},"4762":{"id":"4762","label":"我要依次订阅它们","options":["3eb7"]},"4918":{"id":"4918","label":"我要延迟后再发送","options":["85ea","840a"]},"4966":{"id":"4966","label":"repeat","path":"api/operators/repeat","docType":"function"},"5183":{"id":"5183","label":"partition","path":"api/index/function/partition","docType":"function"},"5668":{"id":"5668","label":"当另一个 Observable 发送值的时候","options":["2bc0"]},"5744":{"id":"5744","label":"window","path":"api/operators/window","docType":"function"},"6229":{"id":"6229","label":"从此 Observable 的首部","options":["356b","b99a"]},"6465":{"id":"6465","label":"并且只输出最终计算出的值","options":["6568"]},"6470":{"id":"6470","label":"combineLatest","path":"api/index/function/combineLatest","docType":"function"},"6568":{"id":"6568","label":"reduce","path":"api/operators/reduce","docType":"function"},"7118":{"id":"7118","label":"我要切换到另一个 Observable","options":["28cf"]},"7572":{"id":"7572","label":"我要重新订阅","options":["c081","5668"]},"7746":{"id":"7746","label":"forkJoin","path":"api/index/function/forkJoin","docType":"function"},"8513":{"id":"8513","label":"publish"},"9166":{"id":"9166","label":"并且并行发送全部嵌套 Observable 所发送的值","options":["dfed","d13f"]},"9257":{"id":"9257","label":"并转换为数组","options":["0089"]},"9500":{"id":"9500","label":"基于另一个 Observable 开始一组，并基于第三个 Observable 结束这一组","options":["590c","76ba"]},"9676":{"id":"9676","label":"次元数据包含从最后一次发送值开始已过去时间","options":["d639"]},"9707":{"id":"9707","label":"audit","path":"api/operators/audit","docType":"function"},"9995":{"id":"9995","label":"我要输出所有值，而不管是从哪一个发送的","options":["831c"]},"9d5c":{"id":"9d5c","label":"mapTo"},"fd59":{"id":"fd59","label":"一个常量值","options":["9d5c"]},"662e":{"id":"662e","label":"map","path":"api/operators/map","docType":"function"},"c8d3":{"id":"c8d3","label":"一个通过公式算出来的值","options":["662e"]},"0b8e":{"id":"0b8e","label":"我要把它发送的每个值改成","options":["fd59","c8d3"]},"c52f":{"id":"c52f","label":"pluck"},"e2cb":{"id":"e2cb","label":"我要从它发送的每个值中取出一个属性","options":["c52f"]},"78ac":{"id":"78ac","label":"tap","path":"api/operators/tap","docType":"function"},"4ee7":{"id":"4ee7","label":"我要监听即将发送的值，但不想影响它们","options":["78ac"]},"7da4":{"id":"7da4","label":"filter","path":"api/operators/filter","docType":"function"},"0ce9":{"id":"0ce9","label":"基于自定义逻辑","options":["7da4"]},"1f50":{"id":"1f50","label":"first","path":"api/operators/first","docType":"function"},"1a9d":{"id":"1a9d","label":"并且只要第一个值","options":["1f50"]},"b062":{"id":"b062","label":"take","path":"api/operators/take","docType":"function"},"c9cc":{"id":"c9cc","label":"基于给定的数量","options":["b062"]},"3c01":{"id":"3c01","label":"takeWhile","path":"api/operators/takeWhile","docType":"function"},"64e3":{"id":"64e3","label":"基于自定义逻辑","options":["3c01"]},"954d":{"id":"954d","label":"如果它们位于此 Observable 的首部","options":["1a9d","c9cc","64e3"]},"c0f8":{"id":"c0f8","label":"elementAt","path":"api/operators/elementAt","docType":"function"},"a1eb":{"id":"a1eb","label":"如果它们精确的处于第 n 位","options":["c0f8"]},"4ac9":{"id":"4ac9","label":"last","path":"api/operators/last","docType":"function"},"96bd":{"id":"96bd","label":"并且只要最后一个值","options":["4ac9"]},"531f":{"id":"531f","label":"takeLast","path":"api/operators/takeLast","docType":"function"},"58fc":{"id":"58fc","label":"基于给定的数量","options":["531f"]},"b12a":{"id":"b12a","label":"如果它们位于此 Observable 的尾部","options":["96bd","58fc"]},"e027":{"id":"e027","label":"takeUntil","path":"api/operators/takeUntil","docType":"function"},"15f5":{"id":"15f5","label":"直到另一个 Observable 发送了值","options":["e027"]},"90c7":{"id":"90c7","label":"我要只允许部分值通过","options":["0ce9","954d","a1eb","b12a","15f5"]},"3e7e":{"id":"3e7e","label":"ignoreElements","path":"api/operators/ignoreElements","docType":"function"},"7d56":{"id":"7d56","label":"全部","options":["3e7e"]},"63ee":{"id":"63ee","label":"skip","path":"api/operators/skip","docType":"function"},"356b":{"id":"356b","label":"基于给定的数量","options":["63ee"]},"b99a":{"id":"b99a","label":"基于自定义逻辑","options":["1694"]},"bf7d":{"id":"bf7d","label":"skipLast","path":"api/operators/skipLast","docType":"function"},"a4eb":{"id":"a4eb","label":"从此 Observable 的尾部","options":["bf7d"]},"af0b":{"id":"af0b","label":"skipUntil","path":"api/operators/skipUntil","docType":"function"},"41a4":{"id":"41a4","label":"直到另一个 Observable 发送了值","options":["af0b"]},"dfbc":{"id":"dfbc","label":"distinctUntilChanged","path":"api/operators/distinctUntilChanged","docType":"function"},"579b":{"id":"579b","label":"distinct","path":"api/operators/distinct","docType":"function"},"1aaa":{"id":"1aaa","label":"以前任何时候曾发送过","options":["579b"]},"e593":{"id":"e593","label":"根据值是否相等","options":["2157","1aaa"]},"0fb9":{"id":"0fb9","label":"发送恰好在当前值前面的那个","options":["3604"]},"c41f":{"id":"c41f","label":"根据一个某个键或对象属性","options":["0fb9"]},"6e3d":{"id":"6e3d","label":"与某些以前发送的值匹配","options":["e593","c41f"]},"f065":{"id":"f065","label":"throttle","path":"api/operators/throttle","docType":"function"},"de26":{"id":"de26","label":"throttleTime","path":"api/operators/throttleTime","docType":"function"},"b878":{"id":"b878","label":"这个时间窗口是根据某个时长来决定的","options":["de26"]},"d6c4":{"id":"d6c4","label":"发送每个时间窗口中的第一个值","options":["4655","b878"]},"71a3":{"id":"71a3","label":"这个时间窗口是基于另一个 Observable 的发送情况","options":["9707"]},"a252":{"id":"a252","label":"auditTime","path":"api/operators/auditTime","docType":"function"},"60c8":{"id":"60c8","label":"这个时间窗口是根据某个时长来决定的","options":["a252"]},"b8f7":{"id":"b8f7","label":"发送每个时间窗口中的最后一个值","options":["71a3","60c8"]},"cde1":{"id":"cde1","label":"debounce","path":"api/operators/debounce","docType":"function"},"91d2":{"id":"91d2","label":"此平静的间隔阈值由另一个 Observable 决定","options":["cde1"]},"9cb0":{"id":"9cb0","label":"debounceTime","path":"api/operators/debounceTime","docType":"function"},"8da7":{"id":"8da7","label":"此平静的间隔阈值是根据某个时长决定的","options":["9cb0"]},"e4bb":{"id":"e4bb","label":"等足够平静时就发送最后一个值","options":["91d2","8da7"]},"ee87":{"id":"ee87","label":"发生的过于频繁","options":["d6c4","b8f7","e4bb"]},"905b":{"id":"905b","label":"我要忽略某些值","options":["7d56","6229","a4eb","41a4","6e3d","ee87"]},"48db":{"id":"48db","label":"scan","path":"api/operators/scan","docType":"function"},"b4b9":{"id":"b4b9","label":"并且每当来源发送某个值时就输出计算好的值","options":["48db"]},"fce7":{"id":"fce7","label":"mergeScan","path":"api/operators/mergeScan","docType":"function"},"fd79":{"id":"fd79","label":"并且当来源发送某个值时，就把计算好的值输出为一个嵌套 Observable","options":["fce7"]},"ed4f":{"id":"ed4f","label":"switchScan","path":"api/operators/switchScan","docType":"function"},"4c72":{"id":"4c72","label":"并且每当来源发送某个值时，就把计算好的值输出为一个嵌套 Observable，同时取消对前一个嵌套 Observable 的订阅","options":["ed4f"]},"f40d":{"id":"f40d","label":"我要使用已发送的所有值做某种计算","options":["6465","b4b9","fd79","4c72"]},"f08c":{"id":"f08c","label":"materialize","path":"api/operators/materialize","docType":"function"},"b460":{"id":"b460","label":"此元数据描述每个通知（next、error 或 complete）","options":["f08c"]},"d639":{"id":"d639","label":"timeInterval","path":"api/operators/timeInterval","docType":"function"},"9c3c":{"id":"9c3c","label":"我要用元数据包装它的各个消息","options":["b460","9676"]},"a3a4":{"id":"a3a4","label":"我要抛出一个错误","options":["3458"]},"28cf":{"id":"28cf","label":"timeoutWith"},"423b":{"id":"423b","label":"在某个非交互式间隔之后","options":["a3a4","7118"]},"c65e":{"id":"c65e","label":"single","path":"api/operators/single","docType":"function"},"eed3":{"id":"eed3","label":"我要确保只有一个值","options":["c65e"]},"f41e":{"id":"f41e","label":"count","path":"api/operators/count","docType":"function"},"cbae":{"id":"cbae","label":"我要知道它发送了多少个值","options":["f41e"]},"d3d7":{"id":"d3d7","label":"startWith","path":"api/operators/startWith","docType":"function"},"3f4c":{"id":"3f4c","label":"我要在开头放一个值","options":["d3d7"]},"885e":{"id":"885e","label":"delay","path":"api/operators/delay","docType":"function"},"85ea":{"id":"85ea","label":"基于给定的时间","options":["885e"]},"ae6e":{"id":"ae6e","label":"delayWhen","path":"api/operators/delayWhen","docType":"function"},"840a":{"id":"840a","label":"基于另一个 Observable 的发送情况","options":["ae6e"]},"0089":{"id":"0089","label":"toArray","path":"api/operators/toArray","docType":"function"},"aa36":{"id":"aa36","label":"Observable","path":"api/index/class/Observable","docType":"class","method":"toPromise"},"890f":{"id":"890f","label":"并且转换为 Promise","options":["aa36"]},"00bd":{"id":"00bd","label":"直到此 Observable 完成","options":["9257","890f"]},"fb8a":{"id":"fb8a","label":"pairwise","path":"api/operators/pairwise","docType":"function"},"b87d":{"id":"b87d","label":"连续配对，作为数组","options":["fb8a"]},"b580":{"id":"b580","label":"bufferCount","path":"api/operators/bufferCount","docType":"function"},"9dee":{"id":"9dee","label":"并且把分好的组以数组形式发送","options":["b580"]},"5e91":{"id":"5e91","label":"windowCount","path":"api/operators/windowCount","docType":"function"},"122d":{"id":"122d","label":"并且把分好的组以嵌套 Observable 的形式发送","options":["5e91"]},"2a6a":{"id":"2a6a","label":"根据特定大小的批次","options":["9dee","122d"]},"0aba":{"id":"0aba","label":"bufferTime","path":"api/operators/bufferTime","docType":"function"},"68e0":{"id":"68e0","label":"并且把分好的组以数组的形式发送","options":["0aba"]},"5ffb":{"id":"5ffb","label":"windowTime","path":"api/operators/windowTime","docType":"function"},"3bc3":{"id":"3bc3","label":"并且把分好的组以嵌套 Observable 的形式发送","options":["5ffb"]},"87ee":{"id":"87ee","label":"基于时间","options":["68e0","3bc3"]},"0840":{"id":"0840","label":"buffer","path":"api/operators/buffer","docType":"function"},"8ced":{"id":"8ced","label":"并且把分好的组以嵌套 Observable 的形式发送","options":["5744"]},"95dd":{"id":"95dd","label":"直到另一个 Observable 发送了值","options":["4028","8ced"]},"155a":{"id":"155a","label":"bufferWhen","path":"api/operators/bufferWhen","docType":"function"},"c130":{"id":"c130","label":"并且把分好的组以数组的形式发送","options":["155a"]},"1a78":{"id":"1a78","label":"windowWhen","path":"api/operators/windowWhen","docType":"function"},"cd42":{"id":"cd42","label":"并且把分好的组以嵌套 Observable 的形式发送","options":["1a78"]},"af5e":{"id":"af5e","label":"基于某个按需创建的 Observable 的发送情况","options":["c130","cd42"]},"d607":{"id":"d607","label":"bufferToggle","path":"api/operators/bufferToggle","docType":"function"},"590c":{"id":"590c","label":"并且把分好的组以数组的形式发送","options":["d607"]},"eb6a":{"id":"eb6a","label":"windowToggle","path":"api/operators/windowToggle","docType":"function"},"76ba":{"id":"76ba","label":"并且把分好的组以嵌套 Observable 的形式发送","options":["eb6a"]},"d034":{"id":"d034","label":"groupBy","path":"api/operators/groupBy","docType":"function"},"0c94":{"id":"0c94","label":"基于根据已发送的值计算出的一个键","options":["d034"]},"5df9":{"id":"5df9","label":"我要对这些值进行分组","options":["00bd","b87d","3323","2a6a","87ee","95dd","af5e","9500","0c94"]},"4b99":{"id":"4b99","label":"mergeMapTo"},"dfed":{"id":"dfed","label":"这里的嵌套 Observable 对每个值都是一样的","options":["4b99"]},"f12e":{"id":"f12e","label":"mergeMap","path":"api/operators/mergeMap","docType":"function"},"d13f":{"id":"d13f","label":"这里的嵌套 Observable 是根据每个值现计算的","options":["f12e"]},"fc0f":{"id":"fc0f","label":"concatMapTo"},"fd18":{"id":"fd18","label":"这里的嵌套 Observable 对每个值都是一样的","options":["fc0f"]},"34dd":{"id":"34dd","label":"concatMap","path":"api/operators/concatMap","docType":"function"},"8f7c":{"id":"8f7c","label":"并且依次发送每个嵌套 Observable 所发送的值","options":["fd18","3569"]},"07e1":{"id":"07e1","label":"switchMapTo"},"eacb":{"id":"eacb","label":"这里的嵌套 Observable 对每个值都是一样的","options":["07e1"]},"6f1d":{"id":"6f1d","label":"switchMap","path":"api/operators/switchMap","docType":"function"},"64ba":{"id":"64ba","label":"这里的嵌套 Observable 是根据每个值现计算的","options":["6f1d"]},"f1a3":{"id":"f1a3","label":"并且当新值抵达时，取消前一个嵌套 Observable","options":["eacb","64ba"]},"0ab8":{"id":"0ab8","label":"exhaustMap","path":"api/operators/exhaustMap","docType":"function"},"3a05":{"id":"3a05","label":"并且即使当前的嵌套 Observable 尚未完结，也要忽略进来的值","options":["0ab8"]},"ed03":{"id":"ed03","label":"expand","path":"api/operators/expand","docType":"function"},"f924":{"id":"f924","label":"并且对每一个新值递归启动一个新的 Observable","options":["ed03"]},"ce49":{"id":"ce49","label":"我要为每个值开始一个新的 Observable","options":["9166","8f7c","f1a3","3a05","f924"]},"aaca":{"id":"aaca","label":"pipe","path":"api/index/function/pipe","docType":"function"},"7c81":{"id":"7c81","label":"我要执行自定义操作","options":["aaca"]},"36a9":{"id":"36a9","label":"share","path":"api/operators/share","docType":"function"},"b860":{"id":"b860","label":"并且在第一个订阅者抵达时尽快启动","options":["36a9"]},"e3c3":{"id":"e3c3","label":"并且手动或用程序启动它","options":["8513"]},"2f25":{"id":"2f25","label":"使用常规 Subject","options":["b860","e3c3"]},"9a4e":{"id":"9a4e","label":"publishBehavior"},"b9b7":{"id":"b9b7","label":"使用 BehaviorSubject","options":["9a4e"]},"ea93":{"id":"ea93","label":"publishReplay"},"9aa4":{"id":"9aa4","label":"使用 ReplaySubject","options":["ea93"]},"93cd":{"id":"93cd","label":"publishLast"},"b530":{"id":"b530","label":"使用 AsyncSubject","options":["93cd"]},"5f88":{"id":"5f88","label":"multicast"},"acd2":{"id":"acd2","label":"使用某种特殊的 Subject 实现","options":["5f88"]},"fc23":{"id":"fc23","label":"我要在多个订阅者之间共享某个订阅","options":["2f25","b9b7","9aa4","b530","acd2"]},"ded6":{"id":"ded6","label":"catchError","path":"api/operators/catchError","docType":"function"},"0852":{"id":"0852","label":"我要启动一个新的 Observable","options":["ded6"]},"cb7f":{"id":"cb7f","label":"retry","path":"api/operators/retry","docType":"function"},"ac7b":{"id":"ac7b","label":"立即","options":["cb7f"]},"526b":{"id":"526b","label":"retryWhen"},"6ff2":{"id":"6ff2","label":"我要重新订阅","options":["ac7b","4505"]},"8ece":{"id":"8ece","label":"当发生错误时","options":["0852","6ff2"]},"c081":{"id":"c081","label":"立即","options":["4966"]},"2bc0":{"id":"2bc0","label":"repeatWhen"},"8a6b":{"id":"8a6b","label":"concat","path":"api/index/function/concat","docType":"function"},"a2d3":{"id":"a2d3","label":"我要启动一个新的 Observable","options":["8a6b"]},"9a30":{"id":"9a30","label":"当它完成时","options":["7572","a2d3"]},"88e4":{"id":"88e4","label":"finalize","path":"api/operators/finalize","docType":"function"},"77ed":{"id":"77ed","label":"subscribeOn","path":"api/operators/subscribeOn","docType":"function"},"80e0":{"id":"80e0","label":"它会修改从调用到订阅之间的路由","options":["77ed"]},"bd9f":{"id":"bd9f","label":"observeOn","path":"api/operators/observeOn","docType":"function"},"d7cb":{"id":"d7cb","label":"它会修改从发送值到 Observer 之间的路由","options":["bd9f"]},"338a":{"id":"338a","label":"我要更改调度器（Scheduler）","options":["80e0","d7cb"]},"fb01":{"id":"fb01","label":"race","path":"api/index/function/race","docType":"function"},"5d5a":{"id":"5d5a","label":"我只想从首先发送值的 Observable 接收各个值","options":["fb01"]},"831c":{"id":"831c","label":"merge","path":"api/operators/merge","docType":"function"},"34ff":{"id":"34ff","label":"combineLatest","path":"api/index/function/combineLatest","docType":"function"},"58e4":{"id":"58e4","label":"当任何一个来源发送值的时候，使用每个来源发送的最后一个值","options":["34ff"]},"8ce2":{"id":"8ce2","label":"withLatestFrom","path":"api/operators/withLatestFrom","docType":"function"},"a5ef":{"id":"a5ef","label":"仅当主 Observable 发送值的时候，使用每个来源发送的最后一个值","options":["8ce2"]},"d799":{"id":"d799","label":"zip","path":"api/index/function/zip","docType":"function"},"759b":{"id":"759b","label":"每个来源中的每个值仅使用一次","options":["d799"]},"9f3d":{"id":"9f3d","label":"我要输出根据源 Observer 发送的值计算出来的某个值","options":["58e4","a5ef","759b"]},"0f5f":{"id":"0f5f","label":"我要把这个 Observable 和其它的合并，并且","options":["5d5a","9995","9f3d"]},"ad9e":{"id":"ad9e","label":"我已经有一个 Observable，并且","options":["0b8e","e2cb","4ee7","90c7","905b","f40d","9c3c","423b","eed3","cbae","3f4c","4918","5df9","ce49","7c81","fc23","8ece","9a30","3112","338a","0f5f"]},"25b9":{"id":"25b9","label":"race","path":"api/index/function/race","docType":"function"},"1c82":{"id":"1c82","label":"我只想从首先发送值的 Observable 接收各个值","options":["25b9"]},"ec21":{"id":"ec21","label":"我想在它们全都完成时得到通知","options":["7746"]},"ba4e":{"id":"ba4e","label":"我要输出所有值，而不管是从哪一个发送的","options":["3916"]},"2da3":{"id":"2da3","label":"当任何一个来源发送值的时候，使用每个来源发送的最后一个值","options":["6470"]},"906f":{"id":"906f","label":"zip","path":"api/index/function/zip","docType":"function"},"393f":{"id":"393f","label":"每个来源中的每个值仅使用一次","options":["906f"]},"bb55":{"id":"bb55","label":"我要输出根据源 Observer 发送的值计算出来的某个值","options":["2da3","393f"]},"3eb7":{"id":"3eb7","label":"concat","path":"api/index/function/concat","docType":"function"},"6be2":{"id":"6be2","label":"我已经有了由某些 Observable 组合成的单一 Observable，并且","options":["1c82","ec21","ba4e","bb55","4762"]},"f2db":{"id":"f2db","label":"Observable","path":"api/index/class/Observable","docType":"class","method":"create"},"1ccf":{"id":"1ccf","label":"使用自定义逻辑","options":["f2db"]},"fd39":{"id":"fd39","label":"generate","path":"api/index/function/generate","docType":"function"},"f730":{"id":"f730","label":"使用一个类似于 for 循环的状态机","options":["fd39"]},"959f":{"id":"959f","label":"throwError","path":"api/index/function/throwError","docType":"function"},"e130":{"id":"e130","label":"抛出一个错误","options":["959f"]},"067e":{"id":"067e","label":"EMPTY","path":"api/index/const/EMPTY","docType":"const"},"7b38":{"id":"7b38","label":"只完成它，而不发送任何值","options":["067e"]},"7c32":{"id":"7c32","label":"NEVER","path":"api/index/const/NEVER","docType":"const"},"4d1a":{"id":"4d1a","label":"来自 DOM 或 Node.js 或类似的东西","options":["3831"]},"2acc":{"id":"2acc","label":"fromEventPattern","path":"api/index/function/fromEventPattern","docType":"function"},"c96e":{"id":"c96e","label":"它使用某个 API 来添加或移除事件处理器","options":["2acc"]},"a7d2":{"id":"a7d2","label":"从一个现有的事件源","options":["4d1a","c96e"]},"c04a":{"id":"c04a","label":"from","path":"api/index/function/from","docType":"function"},"cb40":{"id":"cb40","label":"来自某个 Promise 或事件源","options":["c04a"]},"ef97":{"id":"ef97","label":"from","path":"api/index/function/from","docType":"function"},"4fe4":{"id":"4fe4","label":"针对某个数组中的那些值","options":["ef97"]},"9e48":{"id":"9e48","label":"range","path":"api/index/function/range","docType":"function"},"c08c":{"id":"c08c","label":"of","path":"api/index/function/of","docType":"function"},"bd1b":{"id":"bd1b","label":"针对通过参数给出的那些值","options":["c08c"]},"0e97":{"id":"0e97","label":"它是可迭代者","options":["4fe4","1594","bd1b"]},"9f83":{"id":"9f83","label":"interval","path":"api/index/function/interval","docType":"function"},"d6ec":{"id":"d6ec","label":"均匀的","options":["9f83"]},"6b1d":{"id":"6b1d","label":"timer","path":"api/index/function/timer","docType":"function"},"30a3":{"id":"30a3","label":"带有一个可选的首次延迟","options":["6b1d"]},"47ef":{"id":"47ef","label":"它基于定时器发送一些值","options":["d6ec","30a3"]},"29b8":{"id":"29b8","label":"defer","path":"api/index/function/defer","docType":"function"},"0605":{"id":"0605","label":"它在被订阅时才按需创建","options":["29b8"]},"33c3":{"id":"33c3","label":"我要创建一个新的 Observable","options":["1ccf","f730","e130","7b38","3417","a7d2","cb40","0e97","47ef","0605"]},"456b":{"id":"456b","label":"bindCallback","path":"api/index/function/bindCallback","docType":"function"},"ee34":{"id":"ee34","label":"支持常规的回调 API","options":["456b"]},"fec1":{"id":"fec1","label":"bindNodeCallback","path":"api/index/function/bindNodeCallback","docType":"function"},"be73":{"id":"be73","label":"支持 Node.js 风格的回调 API","options":["fec1"]},"102b":{"id":"102b","label":"我要把某个回调函数转换为 Observable","options":["ee34","be73"]},"24ce":{"id":"24ce","label":"我还没有任何 Observable，并且","options":["33c3","102b"]},"initial":{"id":"initial","options":["ad9e","6be2","24ce"]}}