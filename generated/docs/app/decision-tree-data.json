{"1037":{"id":"1037","label":"retryWhen"},"1219":{"id":"1219","label":"使用自定义逻辑","options":["44eb"]},"1253":{"id":"1253","label":"partition","path":"api/index/function/partition","docType":"function"},"1328":{"id":"1328","label":"auditTime","path":"api/operators/auditTime","docType":"function"},"1677":{"id":"1677","label":"从此 Observable 的首部","options":["d8b4","3e7f"]},"1809":{"id":"1809","label":"我要使用已发送的所有值做某种计算","options":["8737","7338","e11f","c6ba"]},"2660":{"id":"2660","label":"fromEventPattern","path":"api/index/function/fromEventPattern","docType":"function"},"3559":{"id":"3559","label":"pairwise","path":"api/operators/pairwise","docType":"function"},"4233":{"id":"4233","label":"全部","options":["069a"]},"4998":{"id":"4998","label":"share","path":"api/operators/share","docType":"function"},"5369":{"id":"5369","label":"mapTo"},"5725":{"id":"5725","label":"并转换为数组","options":["00ef"]},"5875":{"id":"5875","label":"支持常规的回调 API","options":["b2fa"]},"6368":{"id":"6368","label":"pluck"},"6382":{"id":"6382","label":"我要输出根据源 Observer 发送的值计算出来的某个值","options":["066d","4ee9"]},"6534":{"id":"6534","label":"我要输出所有值，而不管是从哪一个发送的","options":["41d3"]},"6606":{"id":"6606","label":"只完成它，而不发送任何值","options":["811a"]},"6922":{"id":"6922","label":"bindNodeCallback","path":"api/index/function/bindNodeCallback","docType":"function"},"7338":{"id":"7338","label":"并且每当来源发送某个值时就输出计算好的值","options":["f1be"]},"7507":{"id":"7507","label":"使用一个类似于 for 循环的状态机","options":["b1cf"]},"7832":{"id":"7832","label":"这里的嵌套 Observable 是根据每个值现计算的","options":["1afb"]},"8052":{"id":"8052","label":"使用常规 Subject","options":["738e","67dc"]},"8133":{"id":"8133","label":"当它完成、出错或退订时，我要执行某个函数","options":["72dc"]},"8171":{"id":"8171","label":"并且把分好的组以嵌套 Observable 的形式发送","options":["ec54"]},"8292":{"id":"8292","label":"它基于定时器发送一些值","options":["e370","79d6"]},"8521":{"id":"8521","label":"defer","path":"api/index/function/defer","docType":"function"},"8737":{"id":"8737","label":"并且只输出最终计算出的值","options":["1a56"]},"9594":{"id":"9594","label":"我要执行自定义操作","options":["f847"]},"9675":{"id":"9675","label":"我要在多个订阅者之间共享某个订阅","options":["8052","00a9","a56d","c1f1","292a"]},"8cf0":{"id":"8cf0","label":"一个常量值","options":["5369"]},"f92c":{"id":"f92c","label":"map","path":"api/operators/map","docType":"function"},"1d88":{"id":"1d88","label":"一个通过公式算出来的值","options":["f92c"]},"5d7a":{"id":"5d7a","label":"我要把它发送的每个值改成","options":["8cf0","1d88"]},"f8bf":{"id":"f8bf","label":"我要从它发送的每个值中取出一个属性","options":["6368"]},"70a8":{"id":"70a8","label":"tap","path":"api/operators/tap","docType":"function"},"2adb":{"id":"2adb","label":"我要监听即将发送的值，但不想影响它们","options":["70a8"]},"b907":{"id":"b907","label":"filter","path":"api/operators/filter","docType":"function"},"cf2d":{"id":"cf2d","label":"基于自定义逻辑","options":["b907"]},"0ea9":{"id":"0ea9","label":"first","path":"api/operators/first","docType":"function"},"dc60":{"id":"dc60","label":"并且只要第一个值","options":["0ea9"]},"d0ab":{"id":"d0ab","label":"take","path":"api/operators/take","docType":"function"},"876d":{"id":"876d","label":"基于给定的数量","options":["d0ab"]},"2aff":{"id":"2aff","label":"takeWhile","path":"api/operators/takeWhile","docType":"function"},"2d13":{"id":"2d13","label":"基于自定义逻辑","options":["2aff"]},"0174":{"id":"0174","label":"如果它们位于此 Observable 的首部","options":["dc60","876d","2d13"]},"473e":{"id":"473e","label":"elementAt","path":"api/operators/elementAt","docType":"function"},"a349":{"id":"a349","label":"如果它们精确的处于第 n 位","options":["473e"]},"7df4":{"id":"7df4","label":"last","path":"api/operators/last","docType":"function"},"7e66":{"id":"7e66","label":"并且只要最后一个值","options":["7df4"]},"e15e":{"id":"e15e","label":"takeLast","path":"api/operators/takeLast","docType":"function"},"e8fc":{"id":"e8fc","label":"基于给定的数量","options":["e15e"]},"f936":{"id":"f936","label":"如果它们位于此 Observable 的尾部","options":["7e66","e8fc"]},"2fc4":{"id":"2fc4","label":"takeUntil","path":"api/operators/takeUntil","docType":"function"},"b5f3":{"id":"b5f3","label":"直到另一个 Observable 发送了值","options":["2fc4"]},"16f5":{"id":"16f5","label":"我要只允许部分值通过","options":["cf2d","0174","a349","f936","b5f3"]},"069a":{"id":"069a","label":"ignoreElements","path":"api/operators/ignoreElements","docType":"function"},"83aa":{"id":"83aa","label":"skip","path":"api/operators/skip","docType":"function"},"d8b4":{"id":"d8b4","label":"基于给定的数量","options":["83aa"]},"671c":{"id":"671c","label":"skipWhile","path":"api/operators/skipWhile","docType":"function"},"3e7f":{"id":"3e7f","label":"基于自定义逻辑","options":["671c"]},"bbe4":{"id":"bbe4","label":"skipLast","path":"api/operators/skipLast","docType":"function"},"1fc3":{"id":"1fc3","label":"从此 Observable 的尾部","options":["bbe4"]},"4ea8":{"id":"4ea8","label":"skipUntil","path":"api/operators/skipUntil","docType":"function"},"0d89":{"id":"0d89","label":"直到另一个 Observable 发送了值","options":["4ea8"]},"408f":{"id":"408f","label":"distinctUntilChanged","path":"api/operators/distinctUntilChanged","docType":"function"},"a145":{"id":"a145","label":"发送恰好在当前值前面的那个","options":["408f"]},"42d1":{"id":"42d1","label":"distinct","path":"api/operators/distinct","docType":"function"},"e245":{"id":"e245","label":"以前任何时候曾发送过","options":["42d1"]},"06ae":{"id":"06ae","label":"根据值是否相等","options":["a145","e245"]},"979f":{"id":"979f","label":"distinctUntilKeyChanged","path":"api/operators/distinctUntilKeyChanged","docType":"function"},"062c":{"id":"062c","label":"发送恰好在当前值前面的那个","options":["979f"]},"b849":{"id":"b849","label":"根据一个某个键或对象属性","options":["062c"]},"45f5":{"id":"45f5","label":"与某些以前发送的值匹配","options":["06ae","b849"]},"c1e6":{"id":"c1e6","label":"throttle","path":"api/operators/throttle","docType":"function"},"0147":{"id":"0147","label":"这个时间窗口是基于另一个 Observable 的发送情况","options":["c1e6"]},"f975":{"id":"f975","label":"throttleTime","path":"api/operators/throttleTime","docType":"function"},"c206":{"id":"c206","label":"这个时间窗口是根据某个时长来决定的","options":["f975"]},"3d84":{"id":"3d84","label":"发送每个时间窗口中的第一个值","options":["0147","c206"]},"7f19":{"id":"7f19","label":"audit","path":"api/operators/audit","docType":"function"},"e901":{"id":"e901","label":"这个时间窗口是基于另一个 Observable 的发送情况","options":["7f19"]},"be28":{"id":"be28","label":"这个时间窗口是根据某个时长来决定的","options":["1328"]},"bbbb":{"id":"bbbb","label":"发送每个时间窗口中的最后一个值","options":["e901","be28"]},"db7a":{"id":"db7a","label":"debounce","path":"api/operators/debounce","docType":"function"},"2fad":{"id":"2fad","label":"此平静的间隔阈值由另一个 Observable 决定","options":["db7a"]},"f700":{"id":"f700","label":"debounceTime","path":"api/operators/debounceTime","docType":"function"},"e0d6":{"id":"e0d6","label":"此平静的间隔阈值是根据某个时长决定的","options":["f700"]},"c632":{"id":"c632","label":"等足够平静时就发送最后一个值","options":["2fad","e0d6"]},"a0b2":{"id":"a0b2","label":"发生的过于频繁","options":["3d84","bbbb","c632"]},"dc82":{"id":"dc82","label":"我要忽略某些值","options":["4233","1677","1fc3","0d89","45f5","a0b2"]},"1a56":{"id":"1a56","label":"reduce","path":"api/operators/reduce","docType":"function"},"f1be":{"id":"f1be","label":"scan","path":"api/operators/scan","docType":"function"},"648e":{"id":"648e","label":"mergeScan","path":"api/operators/mergeScan","docType":"function"},"e11f":{"id":"e11f","label":"并且当来源发送某个值时，就把计算好的值输出为一个嵌套 Observable","options":["648e"]},"54d0":{"id":"54d0","label":"switchScan","path":"api/operators/switchScan","docType":"function"},"c6ba":{"id":"c6ba","label":"并且每当来源发送某个值时，就把计算好的值输出为一个嵌套 Observable，同时取消对前一个嵌套 Observable 的订阅","options":["54d0"]},"c649":{"id":"c649","label":"materialize","path":"api/operators/materialize","docType":"function"},"0fe8":{"id":"0fe8","label":"此元数据描述每个通知（next、error 或 complete）","options":["c649"]},"26a8":{"id":"26a8","label":"timeInterval","path":"api/operators/timeInterval","docType":"function"},"e9ac":{"id":"e9ac","label":"次元数据包含从最后一次发送值开始已过去时间","options":["26a8"]},"0a17":{"id":"0a17","label":"我要用元数据包装它的各个消息","options":["0fe8","e9ac"]},"104d":{"id":"104d","label":"timeout","path":"api/operators/timeout","docType":"function"},"98a5":{"id":"98a5","label":"我要抛出一个错误","options":["104d"]},"dab4":{"id":"dab4","label":"timeoutWith"},"9d93":{"id":"9d93","label":"我要切换到另一个 Observable","options":["dab4"]},"0987":{"id":"0987","label":"在某个非交互式间隔之后","options":["98a5","9d93"]},"457f":{"id":"457f","label":"single","path":"api/operators/single","docType":"function"},"a57a":{"id":"a57a","label":"我要确保只有一个值","options":["457f"]},"22f8":{"id":"22f8","label":"count","path":"api/operators/count","docType":"function"},"d328":{"id":"d328","label":"我要知道它发送了多少个值","options":["22f8"]},"4ee0":{"id":"4ee0","label":"startWith","path":"api/operators/startWith","docType":"function"},"8bc2":{"id":"8bc2","label":"我要在开头放一个值","options":["4ee0"]},"0d22":{"id":"0d22","label":"delay","path":"api/operators/delay","docType":"function"},"e29e":{"id":"e29e","label":"基于给定的时间","options":["0d22"]},"c840":{"id":"c840","label":"delayWhen","path":"api/operators/delayWhen","docType":"function"},"c13e":{"id":"c13e","label":"基于另一个 Observable 的发送情况","options":["c840"]},"0fc9":{"id":"0fc9","label":"我要延迟后再发送","options":["e29e","c13e"]},"00ef":{"id":"00ef","label":"toArray","path":"api/operators/toArray","docType":"function"},"fbda":{"id":"fbda","label":"Observable","path":"api/index/class/Observable","docType":"class","method":"toPromise"},"39cc":{"id":"39cc","label":"并且转换为 Promise","options":["fbda"]},"065d":{"id":"065d","label":"直到此 Observable 完成","options":["5725","39cc"]},"86ae":{"id":"86ae","label":"连续配对，作为数组","options":["3559"]},"c1a5":{"id":"c1a5","label":"基于某种标准，并且输出两个 Observable：那些符合此标准的，和不符合此标准的","options":["1253"]},"b125":{"id":"b125","label":"bufferCount","path":"api/operators/bufferCount","docType":"function"},"15bf":{"id":"15bf","label":"并且把分好的组以数组形式发送","options":["b125"]},"68c6":{"id":"68c6","label":"windowCount","path":"api/operators/windowCount","docType":"function"},"3fa8":{"id":"3fa8","label":"并且把分好的组以嵌套 Observable 的形式发送","options":["68c6"]},"5d7b":{"id":"5d7b","label":"根据特定大小的批次","options":["15bf","3fa8"]},"b0c1":{"id":"b0c1","label":"bufferTime","path":"api/operators/bufferTime","docType":"function"},"99f1":{"id":"99f1","label":"并且把分好的组以数组的形式发送","options":["b0c1"]},"a51b":{"id":"a51b","label":"windowTime","path":"api/operators/windowTime","docType":"function"},"3db2":{"id":"3db2","label":"并且把分好的组以嵌套 Observable 的形式发送","options":["a51b"]},"133c":{"id":"133c","label":"基于时间","options":["99f1","3db2"]},"abd5":{"id":"abd5","label":"buffer","path":"api/operators/buffer","docType":"function"},"1d53":{"id":"1d53","label":"并且把分好的组以数组的形式发送","options":["abd5"]},"d5d8":{"id":"d5d8","label":"window","path":"api/operators/window","docType":"function"},"0c2f":{"id":"0c2f","label":"并且把分好的组以嵌套 Observable 的形式发送","options":["d5d8"]},"c574":{"id":"c574","label":"直到另一个 Observable 发送了值","options":["1d53","0c2f"]},"0459":{"id":"0459","label":"bufferWhen","path":"api/operators/bufferWhen","docType":"function"},"be65":{"id":"be65","label":"并且把分好的组以数组的形式发送","options":["0459"]},"1acb":{"id":"1acb","label":"windowWhen","path":"api/operators/windowWhen","docType":"function"},"932a":{"id":"932a","label":"并且把分好的组以嵌套 Observable 的形式发送","options":["1acb"]},"73c2":{"id":"73c2","label":"基于某个按需创建的 Observable 的发送情况","options":["be65","932a"]},"7f5a":{"id":"7f5a","label":"bufferToggle","path":"api/operators/bufferToggle","docType":"function"},"3a83":{"id":"3a83","label":"并且把分好的组以数组的形式发送","options":["7f5a"]},"ec54":{"id":"ec54","label":"windowToggle","path":"api/operators/windowToggle","docType":"function"},"d2a9":{"id":"d2a9","label":"基于另一个 Observable 开始一组，并基于第三个 Observable 结束这一组","options":["3a83","8171"]},"23ce":{"id":"23ce","label":"groupBy","path":"api/operators/groupBy","docType":"function"},"a425":{"id":"a425","label":"基于根据已发送的值计算出的一个键","options":["23ce"]},"23a3":{"id":"23a3","label":"我要对这些值进行分组","options":["065d","86ae","c1a5","5d7b","133c","c574","73c2","d2a9","a425"]},"63de":{"id":"63de","label":"mergeMapTo"},"11e0":{"id":"11e0","label":"这里的嵌套 Observable 对每个值都是一样的","options":["63de"]},"1afb":{"id":"1afb","label":"mergeMap","path":"api/operators/mergeMap","docType":"function"},"a206":{"id":"a206","label":"并且并行发送全部嵌套 Observable 所发送的值","options":["11e0","7832"]},"4dc4":{"id":"4dc4","label":"concatMapTo"},"9dc3":{"id":"9dc3","label":"这里的嵌套 Observable 对每个值都是一样的","options":["4dc4"]},"c298":{"id":"c298","label":"concatMap","path":"api/operators/concatMap","docType":"function"},"a35f":{"id":"a35f","label":"这里的嵌套 Observable 是根据每个值现计算的","options":["c298"]},"fd7f":{"id":"fd7f","label":"并且依次发送每个嵌套 Observable 所发送的值","options":["9dc3","a35f"]},"0da0":{"id":"0da0","label":"switchMapTo"},"442b":{"id":"442b","label":"这里的嵌套 Observable 对每个值都是一样的","options":["0da0"]},"c043":{"id":"c043","label":"switchMap","path":"api/operators/switchMap","docType":"function"},"dd7f":{"id":"dd7f","label":"这里的嵌套 Observable 是根据每个值现计算的","options":["c043"]},"a25a":{"id":"a25a","label":"并且当新值抵达时，取消前一个嵌套 Observable","options":["442b","dd7f"]},"fb56":{"id":"fb56","label":"exhaustMap","path":"api/operators/exhaustMap","docType":"function"},"1e2a":{"id":"1e2a","label":"并且即使当前的嵌套 Observable 尚未完结，也要忽略进来的值","options":["fb56"]},"66fe":{"id":"66fe","label":"expand","path":"api/operators/expand","docType":"function"},"4a1d":{"id":"4a1d","label":"并且对每一个新值递归启动一个新的 Observable","options":["66fe"]},"739f":{"id":"739f","label":"我要为每个值开始一个新的 Observable","options":["a206","fd7f","a25a","1e2a","4a1d"]},"f847":{"id":"f847","label":"pipe","path":"api/index/function/pipe","docType":"function"},"738e":{"id":"738e","label":"并且在第一个订阅者抵达时尽快启动","options":["4998"]},"f480":{"id":"f480","label":"publish"},"67dc":{"id":"67dc","label":"并且手动或用程序启动它","options":["f480"]},"0b24":{"id":"0b24","label":"publishBehavior"},"00a9":{"id":"00a9","label":"使用 BehaviorSubject","options":["0b24"]},"bb4a":{"id":"bb4a","label":"publishReplay"},"a56d":{"id":"a56d","label":"使用 ReplaySubject","options":["bb4a"]},"11ef":{"id":"11ef","label":"publishLast"},"c1f1":{"id":"c1f1","label":"使用 AsyncSubject","options":["11ef"]},"ea7c":{"id":"ea7c","label":"multicast"},"292a":{"id":"292a","label":"使用某种特殊的 Subject 实现","options":["ea7c"]},"0d15":{"id":"0d15","label":"catchError","path":"api/operators/catchError","docType":"function"},"d16d":{"id":"d16d","label":"我要启动一个新的 Observable","options":["0d15"]},"050e":{"id":"050e","label":"retry","path":"api/operators/retry","docType":"function"},"4f50":{"id":"4f50","label":"立即","options":["050e"]},"906a":{"id":"906a","label":"当另一个 Observable 发送值的时候","options":["1037"]},"9c06":{"id":"9c06","label":"我要重新订阅","options":["4f50","906a"]},"9bd0":{"id":"9bd0","label":"当发生错误时","options":["d16d","9c06"]},"75e5":{"id":"75e5","label":"repeat","path":"api/operators/repeat","docType":"function"},"4bbf":{"id":"4bbf","label":"立即","options":["75e5"]},"3dd8":{"id":"3dd8","label":"repeatWhen"},"5f53":{"id":"5f53","label":"当另一个 Observable 发送值的时候","options":["3dd8"]},"746d":{"id":"746d","label":"我要重新订阅","options":["4bbf","5f53"]},"f2b9":{"id":"f2b9","label":"concat","path":"api/index/function/concat","docType":"function"},"15ca":{"id":"15ca","label":"我要启动一个新的 Observable","options":["f2b9"]},"789d":{"id":"789d","label":"当它完成时","options":["746d","15ca"]},"72dc":{"id":"72dc","label":"finalize","path":"api/operators/finalize","docType":"function"},"3ce8":{"id":"3ce8","label":"subscribeOn","path":"api/operators/subscribeOn","docType":"function"},"f31b":{"id":"f31b","label":"它会修改从调用到订阅之间的路由","options":["3ce8"]},"4fc3":{"id":"4fc3","label":"observeOn","path":"api/operators/observeOn","docType":"function"},"16f0":{"id":"16f0","label":"它会修改从发送值到 Observer 之间的路由","options":["4fc3"]},"d97a":{"id":"d97a","label":"我要更改调度器（Scheduler）","options":["f31b","16f0"]},"4e6a":{"id":"4e6a","label":"race","path":"api/index/function/race","docType":"function"},"6e22":{"id":"6e22","label":"我只想从首先发送值的 Observable 接收各个值","options":["4e6a"]},"41d3":{"id":"41d3","label":"merge","path":"api/operators/merge","docType":"function"},"30ef":{"id":"30ef","label":"combineLatest","path":"api/index/function/combineLatest","docType":"function"},"d0e9":{"id":"d0e9","label":"当任何一个来源发送值的时候，使用每个来源发送的最后一个值","options":["30ef"]},"dafa":{"id":"dafa","label":"withLatestFrom","path":"api/operators/withLatestFrom","docType":"function"},"985c":{"id":"985c","label":"仅当主 Observable 发送值的时候，使用每个来源发送的最后一个值","options":["dafa"]},"be48":{"id":"be48","label":"zip","path":"api/index/function/zip","docType":"function"},"84aa":{"id":"84aa","label":"每个来源中的每个值仅使用一次","options":["be48"]},"0eee":{"id":"0eee","label":"我要输出根据源 Observer 发送的值计算出来的某个值","options":["d0e9","985c","84aa"]},"576a":{"id":"576a","label":"我要把这个 Observable 和其它的合并，并且","options":["6e22","6534","0eee"]},"3a59":{"id":"3a59","label":"我已经有一个 Observable，并且","options":["5d7a","f8bf","2adb","16f5","dc82","1809","0a17","0987","a57a","d328","8bc2","0fc9","23a3","739f","9594","9675","9bd0","789d","8133","d97a","576a"]},"bade":{"id":"bade","label":"race","path":"api/index/function/race","docType":"function"},"d710":{"id":"d710","label":"我只想从首先发送值的 Observable 接收各个值","options":["bade"]},"54f9":{"id":"54f9","label":"forkJoin","path":"api/index/function/forkJoin","docType":"function"},"a6c3":{"id":"a6c3","label":"我想在它们全都完成时得到通知","options":["54f9"]},"367b":{"id":"367b","label":"merge","path":"api/operators/merge","docType":"function"},"7a98":{"id":"7a98","label":"我要输出所有值，而不管是从哪一个发送的","options":["367b"]},"c178":{"id":"c178","label":"combineLatest","path":"api/index/function/combineLatest","docType":"function"},"066d":{"id":"066d","label":"当任何一个来源发送值的时候，使用每个来源发送的最后一个值","options":["c178"]},"558e":{"id":"558e","label":"zip","path":"api/index/function/zip","docType":"function"},"4ee9":{"id":"4ee9","label":"每个来源中的每个值仅使用一次","options":["558e"]},"4f79":{"id":"4f79","label":"concat","path":"api/index/function/concat","docType":"function"},"65bf":{"id":"65bf","label":"我要依次订阅它们","options":["4f79"]},"abf9":{"id":"abf9","label":"我已经有了由某些 Observable 组合成的单一 Observable，并且","options":["d710","a6c3","7a98","6382","65bf"]},"44eb":{"id":"44eb","label":"Observable","path":"api/index/class/Observable","docType":"class","method":"create"},"b1cf":{"id":"b1cf","label":"generate","path":"api/index/function/generate","docType":"function"},"9afe":{"id":"9afe","label":"throwError","path":"api/index/function/throwError","docType":"function"},"2bca":{"id":"2bca","label":"抛出一个错误","options":["9afe"]},"811a":{"id":"811a","label":"EMPTY","path":"api/index/const/EMPTY","docType":"const"},"f136":{"id":"f136","label":"NEVER","path":"api/index/const/NEVER","docType":"const"},"991a":{"id":"991a","label":"永远不会发送任何东西","options":["f136"]},"350f":{"id":"350f","label":"fromEvent","path":"api/index/function/fromEvent","docType":"function"},"d6a2":{"id":"d6a2","label":"来自 DOM 或 Node.js 或类似的东西","options":["350f"]},"0b8f":{"id":"0b8f","label":"它使用某个 API 来添加或移除事件处理器","options":["2660"]},"10bb":{"id":"10bb","label":"从一个现有的事件源","options":["d6a2","0b8f"]},"c466":{"id":"c466","label":"from","path":"api/index/function/from","docType":"function"},"c1b7":{"id":"c1b7","label":"来自某个 Promise 或事件源","options":["c466"]},"de47":{"id":"de47","label":"from","path":"api/index/function/from","docType":"function"},"203f":{"id":"203f","label":"针对某个数组中的那些值","options":["de47"]},"0914":{"id":"0914","label":"range","path":"api/index/function/range","docType":"function"},"705b":{"id":"705b","label":"针对某个数字范围内的那些值","options":["0914"]},"9d92":{"id":"9d92","label":"of","path":"api/index/function/of","docType":"function"},"b73f":{"id":"b73f","label":"针对通过参数给出的那些值","options":["9d92"]},"b5cf":{"id":"b5cf","label":"它是可迭代者","options":["203f","705b","b73f"]},"bebb":{"id":"bebb","label":"interval","path":"api/index/function/interval","docType":"function"},"e370":{"id":"e370","label":"均匀的","options":["bebb"]},"5ddd":{"id":"5ddd","label":"timer","path":"api/index/function/timer","docType":"function"},"79d6":{"id":"79d6","label":"带有一个可选的首次延迟","options":["5ddd"]},"551b":{"id":"551b","label":"它在被订阅时才按需创建","options":["8521"]},"f80f":{"id":"f80f","label":"我要创建一个新的 Observable","options":["1219","7507","2bca","6606","991a","10bb","c1b7","b5cf","8292","551b"]},"b2fa":{"id":"b2fa","label":"bindCallback","path":"api/index/function/bindCallback","docType":"function"},"73e8":{"id":"73e8","label":"支持 Node.js 风格的回调 API","options":["6922"]},"a15b":{"id":"a15b","label":"我要把某个回调函数转换为 Observable","options":["5875","73e8"]},"cc22":{"id":"cc22","label":"我还没有任何 Observable，并且","options":["f80f","a15b"]},"initial":{"id":"initial","options":["3a59","abf9","cc22"]}}