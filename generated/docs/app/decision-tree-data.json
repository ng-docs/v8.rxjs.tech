{"1138":{"id":"1138","label":"当发生错误时","options":["230c","27d8"]},"1883":{"id":"1883","label":"只完成它，而不发送任何值","options":["3a03"]},"1893":{"id":"1893","label":"这个时间窗口是根据某个时长来决定的","options":["c816"]},"2012":{"id":"2012","label":"timeoutWith"},"2293":{"id":"2293","label":"defer","path":"api/index/function/defer","docType":"function"},"3060":{"id":"3060","label":"并且每当来源发送某个值时，就把计算好的值输出为一个嵌套 Observable，同时取消对前一个嵌套 Observable 的订阅","options":["3a7a"]},"4461":{"id":"4461","label":"skipWhile","path":"api/operators/skipWhile","docType":"function"},"4536":{"id":"4536","label":"takeWhile","path":"api/operators/takeWhile","docType":"function"},"4711":{"id":"4711","label":"全部","options":["19df"]},"4866":{"id":"4866","label":"race","path":"api/index/function/race","docType":"function"},"4976":{"id":"4976","label":"永远不会发送任何东西","options":["0b03"]},"4995":{"id":"4995","label":"发生的过于频繁","options":["7fdd","169c","acb4"]},"5259":{"id":"5259","label":"这里的嵌套 Observable 是根据每个值现计算的","options":["3cc5"]},"5291":{"id":"5291","label":"timeout","path":"api/operators/timeout","docType":"function"},"5772":{"id":"5772","label":"一个常量值","options":["17b1"]},"6421":{"id":"6421","label":"并转换为数组","options":["913a"]},"6964":{"id":"6964","label":"from","path":"api/index/function/from","docType":"function"},"7158":{"id":"7158","label":"forkJoin","path":"api/index/function/forkJoin","docType":"function"},"8340":{"id":"8340","label":"基于某种标准，并且输出两个 Observable：那些符合此标准的，和不符合此标准的","options":["224c"]},"8568":{"id":"8568","label":"take","path":"api/operators/take","docType":"function"},"8704":{"id":"8704","label":"retryWhen"},"8858":{"id":"8858","label":"share","path":"api/operators/share","docType":"function"},"8871":{"id":"8871","label":"这里的嵌套 Observable 对每个值都是一样的","options":["c46d"]},"9118":{"id":"9118","label":"reduce","path":"api/operators/reduce","docType":"function"},"9257":{"id":"9257","label":"我要忽略某些值","options":["4711","5bc5","04ce","bc36","11f2","4995"]},"9343":{"id":"9343","label":"并且把分好的组以数组的形式发送","options":["5d18"]},"9479":{"id":"9479","label":"retry","path":"api/operators/retry","docType":"function"},"9775":{"id":"9775","label":"我要从它发送的每个值中取出一个属性","options":["251a"]},"9776":{"id":"9776","label":"支持 Node.js 风格的回调 API","options":["ed3d"]},"9851":{"id":"9851","label":"当另一个 Observable 发送值的时候","options":["6cbf"]},"17b1":{"id":"17b1","label":"mapTo"},"a4a7":{"id":"a4a7","label":"map","path":"api/operators/map","docType":"function"},"7d84":{"id":"7d84","label":"一个通过公式算出来的值","options":["a4a7"]},"74c0":{"id":"74c0","label":"我要把它发送的每个值改成","options":["5772","7d84"]},"251a":{"id":"251a","label":"pluck"},"bcf1":{"id":"bcf1","label":"tap","path":"api/operators/tap","docType":"function"},"8a53":{"id":"8a53","label":"我要监听即将发送的值，但不想影响它们","options":["bcf1"]},"438f":{"id":"438f","label":"filter","path":"api/operators/filter","docType":"function"},"b900":{"id":"b900","label":"基于自定义逻辑","options":["438f"]},"cea5":{"id":"cea5","label":"first","path":"api/operators/first","docType":"function"},"d8a2":{"id":"d8a2","label":"并且只要第一个值","options":["cea5"]},"a358":{"id":"a358","label":"基于给定的数量","options":["8568"]},"e0b5":{"id":"e0b5","label":"基于自定义逻辑","options":["4536"]},"ce99":{"id":"ce99","label":"如果它们位于此 Observable 的首部","options":["d8a2","a358","e0b5"]},"ae12":{"id":"ae12","label":"elementAt","path":"api/operators/elementAt","docType":"function"},"db68":{"id":"db68","label":"如果它们精确的处于第 n 位","options":["ae12"]},"22a5":{"id":"22a5","label":"last","path":"api/operators/last","docType":"function"},"8b30":{"id":"8b30","label":"并且只要最后一个值","options":["22a5"]},"ba70":{"id":"ba70","label":"takeLast","path":"api/operators/takeLast","docType":"function"},"b5ef":{"id":"b5ef","label":"基于给定的数量","options":["ba70"]},"f9a9":{"id":"f9a9","label":"如果它们位于此 Observable 的尾部","options":["8b30","b5ef"]},"ba8e":{"id":"ba8e","label":"takeUntil","path":"api/operators/takeUntil","docType":"function"},"430f":{"id":"430f","label":"直到另一个 Observable 发送了值","options":["ba8e"]},"c904":{"id":"c904","label":"我要只允许部分值通过","options":["b900","ce99","db68","f9a9","430f"]},"19df":{"id":"19df","label":"ignoreElements","path":"api/operators/ignoreElements","docType":"function"},"8d88":{"id":"8d88","label":"skip","path":"api/operators/skip","docType":"function"},"45bc":{"id":"45bc","label":"基于给定的数量","options":["8d88"]},"0fc0":{"id":"0fc0","label":"基于自定义逻辑","options":["4461"]},"5bc5":{"id":"5bc5","label":"从此 Observable 的首部","options":["45bc","0fc0"]},"48cf":{"id":"48cf","label":"skipLast","path":"api/operators/skipLast","docType":"function"},"04ce":{"id":"04ce","label":"从此 Observable 的尾部","options":["48cf"]},"9dc6":{"id":"9dc6","label":"skipUntil","path":"api/operators/skipUntil","docType":"function"},"bc36":{"id":"bc36","label":"直到另一个 Observable 发送了值","options":["9dc6"]},"39db":{"id":"39db","label":"distinctUntilChanged","path":"api/operators/distinctUntilChanged","docType":"function"},"0239":{"id":"0239","label":"发送恰好在当前值前面的那个","options":["39db"]},"b325":{"id":"b325","label":"distinct","path":"api/operators/distinct","docType":"function"},"9add":{"id":"9add","label":"以前任何时候曾发送过","options":["b325"]},"598f":{"id":"598f","label":"根据值是否相等","options":["0239","9add"]},"8c49":{"id":"8c49","label":"distinctUntilKeyChanged","path":"api/operators/distinctUntilKeyChanged","docType":"function"},"0429":{"id":"0429","label":"发送恰好在当前值前面的那个","options":["8c49"]},"9a3e":{"id":"9a3e","label":"根据一个某个键或对象属性","options":["0429"]},"11f2":{"id":"11f2","label":"与某些以前发送的值匹配","options":["598f","9a3e"]},"4fef":{"id":"4fef","label":"throttle","path":"api/operators/throttle","docType":"function"},"992c":{"id":"992c","label":"这个时间窗口是基于另一个 Observable 的发送情况","options":["4fef"]},"1f05":{"id":"1f05","label":"throttleTime","path":"api/operators/throttleTime","docType":"function"},"2e4d":{"id":"2e4d","label":"这个时间窗口是根据某个时长来决定的","options":["1f05"]},"7fdd":{"id":"7fdd","label":"发送每个时间窗口中的第一个值","options":["992c","2e4d"]},"c383":{"id":"c383","label":"audit","path":"api/operators/audit","docType":"function"},"56b1":{"id":"56b1","label":"这个时间窗口是基于另一个 Observable 的发送情况","options":["c383"]},"c816":{"id":"c816","label":"auditTime","path":"api/operators/auditTime","docType":"function"},"169c":{"id":"169c","label":"发送每个时间窗口中的最后一个值","options":["56b1","1893"]},"1eb4":{"id":"1eb4","label":"debounce","path":"api/operators/debounce","docType":"function"},"fc97":{"id":"fc97","label":"此平静的间隔阈值由另一个 Observable 决定","options":["1eb4"]},"960b":{"id":"960b","label":"debounceTime","path":"api/operators/debounceTime","docType":"function"},"41cd":{"id":"41cd","label":"此平静的间隔阈值是根据某个时长决定的","options":["960b"]},"acb4":{"id":"acb4","label":"等足够平静时就发送最后一个值","options":["fc97","41cd"]},"aee9":{"id":"aee9","label":"并且只输出最终计算出的值","options":["9118"]},"bc97":{"id":"bc97","label":"scan","path":"api/operators/scan","docType":"function"},"8f54":{"id":"8f54","label":"并且每当来源发送某个值时就输出计算好的值","options":["bc97"]},"3ad6":{"id":"3ad6","label":"mergeScan","path":"api/operators/mergeScan","docType":"function"},"1ea9":{"id":"1ea9","label":"并且当来源发送某个值时，就把计算好的值输出为一个嵌套 Observable","options":["3ad6"]},"3a7a":{"id":"3a7a","label":"switchScan","path":"api/operators/switchScan","docType":"function"},"78b9":{"id":"78b9","label":"我要使用已发送的所有值做某种计算","options":["aee9","8f54","1ea9","3060"]},"860a":{"id":"860a","label":"materialize","path":"api/operators/materialize","docType":"function"},"803e":{"id":"803e","label":"此元数据描述每个通知（next、error 或 complete）","options":["860a"]},"95e7":{"id":"95e7","label":"timeInterval","path":"api/operators/timeInterval","docType":"function"},"776d":{"id":"776d","label":"次元数据包含从最后一次发送值开始已过去时间","options":["95e7"]},"13a3":{"id":"13a3","label":"我要用元数据包装它的各个消息","options":["803e","776d"]},"5a58":{"id":"5a58","label":"我要抛出一个错误","options":["5291"]},"e6b5":{"id":"e6b5","label":"我要切换到另一个 Observable","options":["2012"]},"2f14":{"id":"2f14","label":"在某个非交互式间隔之后","options":["5a58","e6b5"]},"70ea":{"id":"70ea","label":"single","path":"api/operators/single","docType":"function"},"c164":{"id":"c164","label":"我要确保只有一个值","options":["70ea"]},"c683":{"id":"c683","label":"count","path":"api/operators/count","docType":"function"},"a7db":{"id":"a7db","label":"我要知道它发送了多少个值","options":["c683"]},"53b3":{"id":"53b3","label":"startWith","path":"api/operators/startWith","docType":"function"},"d01b":{"id":"d01b","label":"我要在开头放一个值","options":["53b3"]},"d82a":{"id":"d82a","label":"delay","path":"api/operators/delay","docType":"function"},"e11a":{"id":"e11a","label":"基于给定的时间","options":["d82a"]},"0dd9":{"id":"0dd9","label":"delayWhen","path":"api/operators/delayWhen","docType":"function"},"d044":{"id":"d044","label":"基于另一个 Observable 的发送情况","options":["0dd9"]},"46ae":{"id":"46ae","label":"我要延迟后再发送","options":["e11a","d044"]},"913a":{"id":"913a","label":"toArray","path":"api/operators/toArray","docType":"function"},"3b17":{"id":"3b17","label":"Observable","path":"api/index/class/Observable","docType":"class","method":"toPromise"},"7d8e":{"id":"7d8e","label":"并且转换为 Promise","options":["3b17"]},"ca87":{"id":"ca87","label":"直到此 Observable 完成","options":["6421","7d8e"]},"f856":{"id":"f856","label":"pairwise","path":"api/operators/pairwise","docType":"function"},"9f9a":{"id":"9f9a","label":"连续配对，作为数组","options":["f856"]},"224c":{"id":"224c","label":"partition","path":"api/index/function/partition","docType":"function"},"56bf":{"id":"56bf","label":"bufferCount","path":"api/operators/bufferCount","docType":"function"},"57be":{"id":"57be","label":"并且把分好的组以数组形式发送","options":["56bf"]},"8a98":{"id":"8a98","label":"windowCount","path":"api/operators/windowCount","docType":"function"},"c184":{"id":"c184","label":"并且把分好的组以嵌套 Observable 的形式发送","options":["8a98"]},"55a7":{"id":"55a7","label":"根据特定大小的批次","options":["57be","c184"]},"5d18":{"id":"5d18","label":"bufferTime","path":"api/operators/bufferTime","docType":"function"},"7ac1":{"id":"7ac1","label":"windowTime","path":"api/operators/windowTime","docType":"function"},"597e":{"id":"597e","label":"并且把分好的组以嵌套 Observable 的形式发送","options":["7ac1"]},"567f":{"id":"567f","label":"基于时间","options":["9343","597e"]},"8f7c":{"id":"8f7c","label":"buffer","path":"api/operators/buffer","docType":"function"},"820e":{"id":"820e","label":"并且把分好的组以数组的形式发送","options":["8f7c"]},"ae9b":{"id":"ae9b","label":"window","path":"api/operators/window","docType":"function"},"ecbe":{"id":"ecbe","label":"并且把分好的组以嵌套 Observable 的形式发送","options":["ae9b"]},"ab37":{"id":"ab37","label":"直到另一个 Observable 发送了值","options":["820e","ecbe"]},"3c50":{"id":"3c50","label":"bufferWhen","path":"api/operators/bufferWhen","docType":"function"},"aa68":{"id":"aa68","label":"并且把分好的组以数组的形式发送","options":["3c50"]},"809c":{"id":"809c","label":"windowWhen","path":"api/operators/windowWhen","docType":"function"},"1d91":{"id":"1d91","label":"并且把分好的组以嵌套 Observable 的形式发送","options":["809c"]},"bdaa":{"id":"bdaa","label":"基于某个按需创建的 Observable 的发送情况","options":["aa68","1d91"]},"a627":{"id":"a627","label":"bufferToggle","path":"api/operators/bufferToggle","docType":"function"},"c3d8":{"id":"c3d8","label":"并且把分好的组以数组的形式发送","options":["a627"]},"31c3":{"id":"31c3","label":"windowToggle","path":"api/operators/windowToggle","docType":"function"},"3f26":{"id":"3f26","label":"并且把分好的组以嵌套 Observable 的形式发送","options":["31c3"]},"c186":{"id":"c186","label":"基于另一个 Observable 开始一组，并基于第三个 Observable 结束这一组","options":["c3d8","3f26"]},"a7a2":{"id":"a7a2","label":"groupBy","path":"api/operators/groupBy","docType":"function"},"6e49":{"id":"6e49","label":"基于根据已发送的值计算出的一个键","options":["a7a2"]},"c9a6":{"id":"c9a6","label":"我要对这些值进行分组","options":["ca87","9f9a","8340","55a7","567f","ab37","bdaa","c186","6e49"]},"5e79":{"id":"5e79","label":"mergeMapTo"},"987e":{"id":"987e","label":"这里的嵌套 Observable 对每个值都是一样的","options":["5e79"]},"f730":{"id":"f730","label":"mergeMap","path":"api/operators/mergeMap","docType":"function"},"779c":{"id":"779c","label":"这里的嵌套 Observable 是根据每个值现计算的","options":["f730"]},"42e6":{"id":"42e6","label":"并且并行发送全部嵌套 Observable 所发送的值","options":["987e","779c"]},"c46d":{"id":"c46d","label":"concatMapTo"},"7bad":{"id":"7bad","label":"concatMap","path":"api/operators/concatMap","docType":"function"},"e6a0":{"id":"e6a0","label":"这里的嵌套 Observable 是根据每个值现计算的","options":["7bad"]},"76db":{"id":"76db","label":"并且依次发送每个嵌套 Observable 所发送的值","options":["8871","e6a0"]},"d1f1":{"id":"d1f1","label":"switchMapTo"},"f191":{"id":"f191","label":"这里的嵌套 Observable 对每个值都是一样的","options":["d1f1"]},"3cc5":{"id":"3cc5","label":"switchMap","path":"api/operators/switchMap","docType":"function"},"a069":{"id":"a069","label":"并且当新值抵达时，取消前一个嵌套 Observable","options":["f191","5259"]},"efe6":{"id":"efe6","label":"exhaustMap","path":"api/operators/exhaustMap","docType":"function"},"6f57":{"id":"6f57","label":"并且即使当前的嵌套 Observable 尚未完结，也要忽略进来的值","options":["efe6"]},"d53b":{"id":"d53b","label":"expand","path":"api/operators/expand","docType":"function"},"c169":{"id":"c169","label":"并且对每一个新值递归启动一个新的 Observable","options":["d53b"]},"72c6":{"id":"72c6","label":"我要为每个值开始一个新的 Observable","options":["42e6","76db","a069","6f57","c169"]},"e0a4":{"id":"e0a4","label":"pipe","path":"api/index/function/pipe","docType":"function"},"4c13":{"id":"4c13","label":"我要执行自定义操作","options":["e0a4"]},"eb47":{"id":"eb47","label":"并且在第一个订阅者抵达时尽快启动","options":["8858"]},"55ce":{"id":"55ce","label":"publish"},"22a9":{"id":"22a9","label":"并且手动或用程序启动它","options":["55ce"]},"ee6f":{"id":"ee6f","label":"使用常规 Subject","options":["eb47","22a9"]},"f4f8":{"id":"f4f8","label":"publishBehavior"},"78e0":{"id":"78e0","label":"使用 BehaviorSubject","options":["f4f8"]},"e3ac":{"id":"e3ac","label":"publishReplay"},"152c":{"id":"152c","label":"使用 ReplaySubject","options":["e3ac"]},"be46":{"id":"be46","label":"publishLast"},"d069":{"id":"d069","label":"使用 AsyncSubject","options":["be46"]},"97bd":{"id":"97bd","label":"multicast"},"3eb3":{"id":"3eb3","label":"使用某种特殊的 Subject 实现","options":["97bd"]},"a450":{"id":"a450","label":"我要在多个订阅者之间共享某个订阅","options":["ee6f","78e0","152c","d069","3eb3"]},"15dc":{"id":"15dc","label":"catchError","path":"api/operators/catchError","docType":"function"},"230c":{"id":"230c","label":"我要启动一个新的 Observable","options":["15dc"]},"7dd6":{"id":"7dd6","label":"立即","options":["9479"]},"8c97":{"id":"8c97","label":"当另一个 Observable 发送值的时候","options":["8704"]},"27d8":{"id":"27d8","label":"我要重新订阅","options":["7dd6","8c97"]},"712b":{"id":"712b","label":"repeat","path":"api/operators/repeat","docType":"function"},"20d1":{"id":"20d1","label":"立即","options":["712b"]},"6cbf":{"id":"6cbf","label":"repeatWhen"},"5a5d":{"id":"5a5d","label":"我要重新订阅","options":["20d1","9851"]},"40f2":{"id":"40f2","label":"concat","path":"api/index/function/concat","docType":"function"},"289b":{"id":"289b","label":"我要启动一个新的 Observable","options":["40f2"]},"8f48":{"id":"8f48","label":"当它完成时","options":["5a5d","289b"]},"3c93":{"id":"3c93","label":"finalize","path":"api/operators/finalize","docType":"function"},"ffc9":{"id":"ffc9","label":"当它完成、出错或退订时，我要执行某个函数","options":["3c93"]},"966a":{"id":"966a","label":"subscribeOn","path":"api/operators/subscribeOn","docType":"function"},"0010":{"id":"0010","label":"它会修改从调用到订阅之间的路由","options":["966a"]},"3e11":{"id":"3e11","label":"observeOn","path":"api/operators/observeOn","docType":"function"},"467a":{"id":"467a","label":"它会修改从发送值到 Observer 之间的路由","options":["3e11"]},"79a3":{"id":"79a3","label":"我要更改调度器（Scheduler）","options":["0010","467a"]},"e238":{"id":"e238","label":"race","path":"api/index/function/race","docType":"function"},"6fe9":{"id":"6fe9","label":"我只想从首先发送值的 Observable 接收各个值","options":["e238"]},"8fa0":{"id":"8fa0","label":"merge","path":"api/operators/merge","docType":"function"},"a787":{"id":"a787","label":"我要输出所有值，而不管是从哪一个发送的","options":["8fa0"]},"052f":{"id":"052f","label":"combineLatest","path":"api/index/function/combineLatest","docType":"function"},"5ae4":{"id":"5ae4","label":"当任何一个来源发送值的时候，使用每个来源发送的最后一个值","options":["052f"]},"9c49":{"id":"9c49","label":"withLatestFrom","path":"api/operators/withLatestFrom","docType":"function"},"ea9d":{"id":"ea9d","label":"仅当主 Observable 发送值的时候，使用每个来源发送的最后一个值","options":["9c49"]},"62db":{"id":"62db","label":"zip","path":"api/index/function/zip","docType":"function"},"42a4":{"id":"42a4","label":"每个来源中的每个值仅使用一次","options":["62db"]},"0be5":{"id":"0be5","label":"我要输出根据源 Observer 发送的值计算出来的某个值","options":["5ae4","ea9d","42a4"]},"7feb":{"id":"7feb","label":"我要把这个 Observable 和其它的合并，并且","options":["6fe9","a787","0be5"]},"f0e4":{"id":"f0e4","label":"我已经有一个 Observable，并且","options":["74c0","9775","8a53","c904","9257","78b9","13a3","2f14","c164","a7db","d01b","46ae","c9a6","72c6","4c13","a450","1138","8f48","ffc9","79a3","7feb"]},"bd14":{"id":"bd14","label":"我只想从首先发送值的 Observable 接收各个值","options":["4866"]},"855d":{"id":"855d","label":"我想在它们全都完成时得到通知","options":["7158"]},"d94f":{"id":"d94f","label":"merge","path":"api/operators/merge","docType":"function"},"8c55":{"id":"8c55","label":"我要输出所有值，而不管是从哪一个发送的","options":["d94f"]},"f1f2":{"id":"f1f2","label":"combineLatest","path":"api/index/function/combineLatest","docType":"function"},"187a":{"id":"187a","label":"当任何一个来源发送值的时候，使用每个来源发送的最后一个值","options":["f1f2"]},"f3bb":{"id":"f3bb","label":"zip","path":"api/index/function/zip","docType":"function"},"ad6d":{"id":"ad6d","label":"每个来源中的每个值仅使用一次","options":["f3bb"]},"9bac":{"id":"9bac","label":"我要输出根据源 Observer 发送的值计算出来的某个值","options":["187a","ad6d"]},"d285":{"id":"d285","label":"concat","path":"api/index/function/concat","docType":"function"},"7e2d":{"id":"7e2d","label":"我要依次订阅它们","options":["d285"]},"6ea7":{"id":"6ea7","label":"我已经有了由某些 Observable 组合成的单一 Observable，并且","options":["bd14","855d","8c55","9bac","7e2d"]},"fea6":{"id":"fea6","label":"Observable","path":"api/index/class/Observable","docType":"class","method":"create"},"712e":{"id":"712e","label":"使用自定义逻辑","options":["fea6"]},"1d85":{"id":"1d85","label":"generate","path":"api/index/function/generate","docType":"function"},"2c72":{"id":"2c72","label":"使用一个类似于 for 循环的状态机","options":["1d85"]},"0bd1":{"id":"0bd1","label":"throwError","path":"api/index/function/throwError","docType":"function"},"313f":{"id":"313f","label":"抛出一个错误","options":["0bd1"]},"3a03":{"id":"3a03","label":"EMPTY","path":"api/index/const/EMPTY","docType":"const"},"0b03":{"id":"0b03","label":"NEVER","path":"api/index/const/NEVER","docType":"const"},"09ce":{"id":"09ce","label":"fromEvent","path":"api/index/function/fromEvent","docType":"function"},"ee1a":{"id":"ee1a","label":"来自 DOM 或 Node.js 或类似的东西","options":["09ce"]},"e2c3":{"id":"e2c3","label":"fromEventPattern","path":"api/index/function/fromEventPattern","docType":"function"},"ae94":{"id":"ae94","label":"它使用某个 API 来添加或移除事件处理器","options":["e2c3"]},"5d77":{"id":"5d77","label":"从一个现有的事件源","options":["ee1a","ae94"]},"1b58":{"id":"1b58","label":"from","path":"api/index/function/from","docType":"function"},"ee85":{"id":"ee85","label":"来自某个 Promise 或事件源","options":["1b58"]},"41e7":{"id":"41e7","label":"针对某个数组中的那些值","options":["6964"]},"ebc0":{"id":"ebc0","label":"range","path":"api/index/function/range","docType":"function"},"c6bb":{"id":"c6bb","label":"针对某个数字范围内的那些值","options":["ebc0"]},"a761":{"id":"a761","label":"of","path":"api/index/function/of","docType":"function"},"3b9f":{"id":"3b9f","label":"针对通过参数给出的那些值","options":["a761"]},"0960":{"id":"0960","label":"它是可迭代者","options":["41e7","c6bb","3b9f"]},"dc08":{"id":"dc08","label":"interval","path":"api/index/function/interval","docType":"function"},"4f50":{"id":"4f50","label":"均匀的","options":["dc08"]},"b0a9":{"id":"b0a9","label":"timer","path":"api/index/function/timer","docType":"function"},"e9fd":{"id":"e9fd","label":"带有一个可选的首次延迟","options":["b0a9"]},"334d":{"id":"334d","label":"它基于定时器发送一些值","options":["4f50","e9fd"]},"9c6e":{"id":"9c6e","label":"它在被订阅时才按需创建","options":["2293"]},"6ee6":{"id":"6ee6","label":"我要创建一个新的 Observable","options":["712e","2c72","313f","1883","4976","5d77","ee85","0960","334d","9c6e"]},"b728":{"id":"b728","label":"bindCallback","path":"api/index/function/bindCallback","docType":"function"},"b62e":{"id":"b62e","label":"支持常规的回调 API","options":["b728"]},"ed3d":{"id":"ed3d","label":"bindNodeCallback","path":"api/index/function/bindNodeCallback","docType":"function"},"ba42":{"id":"ba42","label":"我要把某个回调函数转换为 Observable","options":["b62e","9776"]},"31d9":{"id":"31d9","label":"我还没有任何 Observable，并且","options":["6ee6","ba42"]},"initial":{"id":"initial","options":["f0e4","6ea7","31d9"]}}