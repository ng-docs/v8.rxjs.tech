{"1449":{"id":"1449","label":"publishLast"},"1670":{"id":"1670","label":"我要监听即将发送的值，但不想影响它们","options":["067c"]},"1939":{"id":"1939","label":"此平静的间隔阈值由另一个 Observable 决定","options":["8659"]},"2648":{"id":"2648","label":"defer","path":"api/index/function/defer","docType":"function"},"2796":{"id":"2796","label":"并且只要最后一个值","options":["214f"]},"2813":{"id":"2813","label":"materialize","path":"api/operators/materialize","docType":"function"},"3099":{"id":"3099","label":"我要输出根据源 Observer 发送的值计算出来的某个值","options":["d225","689e","c16d"]},"3251":{"id":"3251","label":"timeoutWith"},"3335":{"id":"3335","label":"我要输出所有值，而不管是从哪一个发送的","options":["6adf"]},"3469":{"id":"3469","label":"skip","path":"api/operators/skip","docType":"function"},"3615":{"id":"3615","label":"并且把分好的组以数组的形式发送","options":["534d"]},"3762":{"id":"3762","label":"永远不会发送任何东西","options":["73c9"]},"3854":{"id":"3854","label":"等足够平静时就发送最后一个值","options":["1939","757e"]},"4050":{"id":"4050","label":"当它完成时","options":["57eb","4075"]},"4057":{"id":"4057","label":"我还没有任何 Observable，并且","options":["1cf3","4061"]},"4061":{"id":"4061","label":"我要把某个回调函数转换为 Observable","options":["38a6","176b"]},"4075":{"id":"4075","label":"我要启动一个新的 Observable","options":["0b3a"]},"4140":{"id":"4140","label":"elementAt","path":"api/operators/elementAt","docType":"function"},"4263":{"id":"4263","label":"基于根据已发送的值计算出的一个键","options":["baad"]},"4586":{"id":"4586","label":"并且对每一个新值递归启动一个新的 Observable","options":["49c9"]},"4605":{"id":"4605","label":"from","path":"api/index/function/from","docType":"function"},"4902":{"id":"4902","label":"publishReplay"},"5101":{"id":"5101","label":"并且依次发送每个嵌套 Observable 所发送的值","options":["e60f","b10e"]},"5200":{"id":"5200","label":"forkJoin","path":"api/index/function/forkJoin","docType":"function"},"5491":{"id":"5491","label":"当它完成、出错或退订时，我要执行某个函数","options":["e925"]},"5560":{"id":"5560","label":"如果它们位于此 Observable 的尾部","options":["2796","418e"]},"5764":{"id":"5764","label":"range","path":"api/index/function/range","docType":"function"},"5869":{"id":"5869","label":"基于给定的时间","options":["0e01"]},"5988":{"id":"5988","label":"pluck"},"6098":{"id":"6098","label":"bindCallback","path":"api/index/function/bindCallback","docType":"function"},"6260":{"id":"6260","label":"使用 ReplaySubject","options":["4902"]},"6450":{"id":"6450","label":"EMPTY","path":"api/index/const/EMPTY","docType":"const"},"6940":{"id":"6940","label":"来自某个 Promise 或事件源","options":["4605"]},"7095":{"id":"7095","label":"我要更改调度器（Scheduler）","options":["353e","ca10"]},"7209":{"id":"7209","label":"这里的嵌套 Observable 对每个值都是一样的","options":["502c"]},"7565":{"id":"7565","label":"这里的嵌套 Observable 对每个值都是一样的","options":["3cd0"]},"8045":{"id":"8045","label":"timer","path":"api/index/function/timer","docType":"function"},"8114":{"id":"8114","label":"并且把分好的组以嵌套 Observable 的形式发送","options":["20fc"]},"8659":{"id":"8659","label":"并且当来源发送某个值时，就把计算好的值输出为一个嵌套 Observable","options":["7db2"]},"8764":{"id":"8764","label":"如果它们位于此 Observable 的首部","options":["3d35","0eaf","9f51"]},"9621":{"id":"9621","label":"并且每当来源发送某个值时就输出计算好的值","options":["f562"]},"9664":{"id":"9664","label":"发送每个时间窗口中的第一个值","options":["fa4e","82ff"]},"9682":{"id":"9682","label":"并转换为数组","options":["e2ff"]},"b2a4":{"id":"b2a4","label":"mapTo"},"0db9":{"id":"0db9","label":"一个常量值","options":["b2a4"]},"c75c":{"id":"c75c","label":"map","path":"api/operators/map","docType":"function"},"2e13":{"id":"2e13","label":"一个通过公式算出来的值","options":["c75c"]},"9f6b":{"id":"9f6b","label":"我要把它发送的每个值改成","options":["0db9","2e13"]},"8f8f":{"id":"8f8f","label":"我要从它发送的每个值中取出一个属性","options":["5988"]},"067c":{"id":"067c","label":"tap","path":"api/operators/tap","docType":"function"},"a952":{"id":"a952","label":"filter","path":"api/operators/filter","docType":"function"},"133f":{"id":"133f","label":"基于自定义逻辑","options":["a952"]},"d4cd":{"id":"d4cd","label":"first","path":"api/operators/first","docType":"function"},"3d35":{"id":"3d35","label":"并且只要第一个值","options":["d4cd"]},"f512":{"id":"f512","label":"take","path":"api/operators/take","docType":"function"},"0eaf":{"id":"0eaf","label":"基于给定的数量","options":["f512"]},"e930":{"id":"e930","label":"takeWhile","path":"api/operators/takeWhile","docType":"function"},"9f51":{"id":"9f51","label":"基于自定义逻辑","options":["e930"]},"bdfc":{"id":"bdfc","label":"如果它们精确的处于第 n 位","options":["4140"]},"214f":{"id":"214f","label":"last","path":"api/operators/last","docType":"function"},"6b81":{"id":"6b81","label":"takeLast","path":"api/operators/takeLast","docType":"function"},"418e":{"id":"418e","label":"基于给定的数量","options":["6b81"]},"4bfc":{"id":"4bfc","label":"takeUntil","path":"api/operators/takeUntil","docType":"function"},"2af0":{"id":"2af0","label":"直到另一个 Observable 发送了值","options":["4bfc"]},"35d1":{"id":"35d1","label":"我要只允许部分值通过","options":["133f","8764","bdfc","5560","2af0"]},"56f7":{"id":"56f7","label":"ignoreElements","path":"api/operators/ignoreElements","docType":"function"},"6e84":{"id":"6e84","label":"全部","options":["56f7"]},"a584":{"id":"a584","label":"基于给定的数量","options":["3469"]},"af41":{"id":"af41","label":"skipWhile","path":"api/operators/skipWhile","docType":"function"},"1d3f":{"id":"1d3f","label":"基于自定义逻辑","options":["af41"]},"ee8c":{"id":"ee8c","label":"从此 Observable 的首部","options":["a584","1d3f"]},"a9f7":{"id":"a9f7","label":"skipLast","path":"api/operators/skipLast","docType":"function"},"289c":{"id":"289c","label":"从此 Observable 的尾部","options":["a9f7"]},"0586":{"id":"0586","label":"skipUntil","path":"api/operators/skipUntil","docType":"function"},"b23e":{"id":"b23e","label":"直到另一个 Observable 发送了值","options":["0586"]},"4aee":{"id":"4aee","label":"distinctUntilChanged","path":"api/operators/distinctUntilChanged","docType":"function"},"ece0":{"id":"ece0","label":"发送恰好在当前值前面的那个","options":["4aee"]},"24ba":{"id":"24ba","label":"distinct","path":"api/operators/distinct","docType":"function"},"073a":{"id":"073a","label":"以前任何时候曾发送过","options":["24ba"]},"9ade":{"id":"9ade","label":"根据值是否相等","options":["ece0","073a"]},"c6ce":{"id":"c6ce","label":"distinctUntilKeyChanged","path":"api/operators/distinctUntilKeyChanged","docType":"function"},"68b6":{"id":"68b6","label":"发送恰好在当前值前面的那个","options":["c6ce"]},"1d8e":{"id":"1d8e","label":"根据一个某个键或对象属性","options":["68b6"]},"b5ad":{"id":"b5ad","label":"与某些以前发送的值匹配","options":["9ade","1d8e"]},"e39d":{"id":"e39d","label":"throttle","path":"api/operators/throttle","docType":"function"},"fa4e":{"id":"fa4e","label":"这个时间窗口是基于另一个 Observable 的发送情况","options":["e39d"]},"6a19":{"id":"6a19","label":"throttleTime","path":"api/operators/throttleTime","docType":"function"},"82ff":{"id":"82ff","label":"这个时间窗口是根据某个时长来决定的","options":["6a19"]},"965b":{"id":"965b","label":"audit","path":"api/operators/audit","docType":"function"},"a696":{"id":"a696","label":"这个时间窗口是基于另一个 Observable 的发送情况","options":["965b"]},"66ff":{"id":"66ff","label":"auditTime","path":"api/operators/auditTime","docType":"function"},"877f":{"id":"877f","label":"这个时间窗口是根据某个时长来决定的","options":["66ff"]},"d67d":{"id":"d67d","label":"发送每个时间窗口中的最后一个值","options":["a696","877f"]},"8f4b":{"id":"8f4b","label":"debounceTime","path":"api/operators/debounceTime","docType":"function"},"757e":{"id":"757e","label":"此平静的间隔阈值是根据某个时长决定的","options":["8f4b"]},"6e88":{"id":"6e88","label":"发生的过于频繁","options":["9664","d67d","3854"]},"1e38":{"id":"1e38","label":"我要忽略某些值","options":["6e84","ee8c","289c","b23e","b5ad","6e88"]},"0990":{"id":"0990","label":"reduce","path":"api/operators/reduce","docType":"function"},"a139":{"id":"a139","label":"并且只输出最终计算出的值","options":["0990"]},"f562":{"id":"f562","label":"scan","path":"api/operators/scan","docType":"function"},"7db2":{"id":"7db2","label":"mergeScan","path":"api/operators/mergeScan","docType":"function"},"86ee":{"id":"86ee","label":"switchScan","path":"api/operators/switchScan","docType":"function"},"e636":{"id":"e636","label":"并且每当来源发送某个值时，就把计算好的值输出为一个嵌套 Observable，同时取消对前一个嵌套 Observable 的订阅","options":["86ee"]},"6dff":{"id":"6dff","label":"我要使用已发送的所有值做某种计算","options":["a139","9621","8659","e636"]},"6a5a":{"id":"6a5a","label":"此元数据描述每个通知（next、error 或 complete）","options":["2813"]},"2cca":{"id":"2cca","label":"timeInterval","path":"api/operators/timeInterval","docType":"function"},"17c8":{"id":"17c8","label":"次元数据包含从最后一次发送值开始已过去时间","options":["2cca"]},"ab1f":{"id":"ab1f","label":"我要用元数据包装它的各个消息","options":["6a5a","17c8"]},"cd7d":{"id":"cd7d","label":"timeout","path":"api/operators/timeout","docType":"function"},"a983":{"id":"a983","label":"我要抛出一个错误","options":["cd7d"]},"c0cd":{"id":"c0cd","label":"我要切换到另一个 Observable","options":["3251"]},"136b":{"id":"136b","label":"在某个非交互式间隔之后","options":["a983","c0cd"]},"ea00":{"id":"ea00","label":"single","path":"api/operators/single","docType":"function"},"70e7":{"id":"70e7","label":"我要确保只有一个值","options":["ea00"]},"9a47":{"id":"9a47","label":"count","path":"api/operators/count","docType":"function"},"c051":{"id":"c051","label":"我要知道它发送了多少个值","options":["9a47"]},"0f30":{"id":"0f30","label":"startWith","path":"api/operators/startWith","docType":"function"},"ff00":{"id":"ff00","label":"我要在开头放一个值","options":["0f30"]},"0e01":{"id":"0e01","label":"delay","path":"api/operators/delay","docType":"function"},"8c27":{"id":"8c27","label":"delayWhen","path":"api/operators/delayWhen","docType":"function"},"37da":{"id":"37da","label":"基于另一个 Observable 的发送情况","options":["8c27"]},"b1da":{"id":"b1da","label":"我要延迟后再发送","options":["5869","37da"]},"e2ff":{"id":"e2ff","label":"toArray","path":"api/operators/toArray","docType":"function"},"3f5b":{"id":"3f5b","label":"Observable","path":"api/index/class/Observable","docType":"class","method":"toPromise"},"ded6":{"id":"ded6","label":"并且转换为 Promise","options":["3f5b"]},"528e":{"id":"528e","label":"直到此 Observable 完成","options":["9682","ded6"]},"6ad9":{"id":"6ad9","label":"pairwise","path":"api/operators/pairwise","docType":"function"},"de1d":{"id":"de1d","label":"连续配对，作为数组","options":["6ad9"]},"7e3b":{"id":"7e3b","label":"partition","path":"api/index/function/partition","docType":"function"},"98b9":{"id":"98b9","label":"基于某种标准，并且输出两个 Observable：那些符合此标准的，和不符合此标准的","options":["7e3b"]},"559a":{"id":"559a","label":"bufferCount","path":"api/operators/bufferCount","docType":"function"},"ea6c":{"id":"ea6c","label":"并且把分好的组以数组形式发送","options":["559a"]},"cca5":{"id":"cca5","label":"windowCount","path":"api/operators/windowCount","docType":"function"},"d72b":{"id":"d72b","label":"并且把分好的组以嵌套 Observable 的形式发送","options":["cca5"]},"df8e":{"id":"df8e","label":"根据特定大小的批次","options":["ea6c","d72b"]},"534d":{"id":"534d","label":"bufferTime","path":"api/operators/bufferTime","docType":"function"},"20fc":{"id":"20fc","label":"windowTime","path":"api/operators/windowTime","docType":"function"},"7ac9":{"id":"7ac9","label":"基于时间","options":["3615","8114"]},"a3c6":{"id":"a3c6","label":"buffer","path":"api/operators/buffer","docType":"function"},"7bf9":{"id":"7bf9","label":"并且把分好的组以数组的形式发送","options":["a3c6"]},"ebec":{"id":"ebec","label":"window","path":"api/operators/window","docType":"function"},"d3d2":{"id":"d3d2","label":"并且把分好的组以嵌套 Observable 的形式发送","options":["ebec"]},"ccaf":{"id":"ccaf","label":"直到另一个 Observable 发送了值","options":["7bf9","d3d2"]},"e67e":{"id":"e67e","label":"bufferWhen","path":"api/operators/bufferWhen","docType":"function"},"7f4a":{"id":"7f4a","label":"并且把分好的组以数组的形式发送","options":["e67e"]},"cbdc":{"id":"cbdc","label":"windowWhen","path":"api/operators/windowWhen","docType":"function"},"76af":{"id":"76af","label":"并且把分好的组以嵌套 Observable 的形式发送","options":["cbdc"]},"db90":{"id":"db90","label":"基于某个按需创建的 Observable 的发送情况","options":["7f4a","76af"]},"8df1":{"id":"8df1","label":"bufferToggle","path":"api/operators/bufferToggle","docType":"function"},"d482":{"id":"d482","label":"并且把分好的组以数组的形式发送","options":["8df1"]},"ea0a":{"id":"ea0a","label":"windowToggle","path":"api/operators/windowToggle","docType":"function"},"cf11":{"id":"cf11","label":"并且把分好的组以嵌套 Observable 的形式发送","options":["ea0a"]},"6b4e":{"id":"6b4e","label":"基于另一个 Observable 开始一组，并基于第三个 Observable 结束这一组","options":["d482","cf11"]},"baad":{"id":"baad","label":"groupBy","path":"api/operators/groupBy","docType":"function"},"6c0c":{"id":"6c0c","label":"我要对这些值进行分组","options":["528e","de1d","98b9","df8e","7ac9","ccaf","db90","6b4e","4263"]},"3cd0":{"id":"3cd0","label":"mergeMapTo"},"c42b":{"id":"c42b","label":"mergeMap","path":"api/operators/mergeMap","docType":"function"},"f210":{"id":"f210","label":"这里的嵌套 Observable 是根据每个值现计算的","options":["c42b"]},"83e2":{"id":"83e2","label":"并且并行发送全部嵌套 Observable 所发送的值","options":["7565","f210"]},"4c75":{"id":"4c75","label":"concatMapTo"},"e60f":{"id":"e60f","label":"这里的嵌套 Observable 对每个值都是一样的","options":["4c75"]},"0f76":{"id":"0f76","label":"concatMap","path":"api/operators/concatMap","docType":"function"},"b10e":{"id":"b10e","label":"这里的嵌套 Observable 是根据每个值现计算的","options":["0f76"]},"502c":{"id":"502c","label":"switchMapTo"},"96af":{"id":"96af","label":"switchMap","path":"api/operators/switchMap","docType":"function"},"d458":{"id":"d458","label":"这里的嵌套 Observable 是根据每个值现计算的","options":["96af"]},"ddf5":{"id":"ddf5","label":"并且当新值抵达时，取消前一个嵌套 Observable","options":["7209","d458"]},"c74f":{"id":"c74f","label":"exhaustMap","path":"api/operators/exhaustMap","docType":"function"},"8e4d":{"id":"8e4d","label":"并且即使当前的嵌套 Observable 尚未完结，也要忽略进来的值","options":["c74f"]},"49c9":{"id":"49c9","label":"expand","path":"api/operators/expand","docType":"function"},"a30b":{"id":"a30b","label":"我要为每个值开始一个新的 Observable","options":["83e2","5101","ddf5","8e4d","4586"]},"1ae5":{"id":"1ae5","label":"pipe","path":"api/index/function/pipe","docType":"function"},"f075":{"id":"f075","label":"我要执行自定义操作","options":["1ae5"]},"dd99":{"id":"dd99","label":"share","path":"api/operators/share","docType":"function"},"eb1f":{"id":"eb1f","label":"并且在第一个订阅者抵达时尽快启动","options":["dd99"]},"ac57":{"id":"ac57","label":"publish"},"16ac":{"id":"16ac","label":"并且手动或用程序启动它","options":["ac57"]},"ff73":{"id":"ff73","label":"使用常规 Subject","options":["eb1f","16ac"]},"292a":{"id":"292a","label":"publishBehavior"},"c449":{"id":"c449","label":"使用 BehaviorSubject","options":["292a"]},"3c27":{"id":"3c27","label":"使用 AsyncSubject","options":["1449"]},"e0b0":{"id":"e0b0","label":"multicast"},"a09d":{"id":"a09d","label":"使用某种特殊的 Subject 实现","options":["e0b0"]},"99b7":{"id":"99b7","label":"我要在多个订阅者之间共享某个订阅","options":["ff73","c449","6260","3c27","a09d"]},"a30c":{"id":"a30c","label":"catchError","path":"api/operators/catchError","docType":"function"},"b8af":{"id":"b8af","label":"我要启动一个新的 Observable","options":["a30c"]},"e535":{"id":"e535","label":"retry","path":"api/operators/retry","docType":"function"},"7c5f":{"id":"7c5f","label":"立即","options":["e535"]},"0841":{"id":"0841","label":"retryWhen"},"d3a9":{"id":"d3a9","label":"当另一个 Observable 发送值的时候","options":["0841"]},"626e":{"id":"626e","label":"我要重新订阅","options":["7c5f","d3a9"]},"467a":{"id":"467a","label":"当发生错误时","options":["b8af","626e"]},"5ea8":{"id":"5ea8","label":"repeat","path":"api/operators/repeat","docType":"function"},"56eb":{"id":"56eb","label":"立即","options":["5ea8"]},"d7b3":{"id":"d7b3","label":"repeatWhen"},"c255":{"id":"c255","label":"当另一个 Observable 发送值的时候","options":["d7b3"]},"57eb":{"id":"57eb","label":"我要重新订阅","options":["56eb","c255"]},"0b3a":{"id":"0b3a","label":"concat","path":"api/index/function/concat","docType":"function"},"e925":{"id":"e925","label":"finalize","path":"api/operators/finalize","docType":"function"},"0907":{"id":"0907","label":"subscribeOn","path":"api/operators/subscribeOn","docType":"function"},"353e":{"id":"353e","label":"它会修改从调用到订阅之间的路由","options":["0907"]},"113f":{"id":"113f","label":"observeOn","path":"api/operators/observeOn","docType":"function"},"ca10":{"id":"ca10","label":"它会修改从发送值到 Observer 之间的路由","options":["113f"]},"b87a":{"id":"b87a","label":"race","path":"api/index/function/race","docType":"function"},"c0f1":{"id":"c0f1","label":"我只想从首先发送值的 Observable 接收各个值","options":["b87a"]},"cddd":{"id":"cddd","label":"merge","path":"api/operators/merge","docType":"function"},"acba":{"id":"acba","label":"我要输出所有值，而不管是从哪一个发送的","options":["cddd"]},"dcb3":{"id":"dcb3","label":"combineLatest","path":"api/index/function/combineLatest","docType":"function"},"d225":{"id":"d225","label":"当任何一个来源发送值的时候，使用每个来源发送的最后一个值","options":["dcb3"]},"1df6":{"id":"1df6","label":"withLatestFrom","path":"api/operators/withLatestFrom","docType":"function"},"689e":{"id":"689e","label":"仅当主 Observable 发送值的时候，使用每个来源发送的最后一个值","options":["1df6"]},"93ef":{"id":"93ef","label":"zip","path":"api/index/function/zip","docType":"function"},"c16d":{"id":"c16d","label":"每个来源中的每个值仅使用一次","options":["93ef"]},"668b":{"id":"668b","label":"我要把这个 Observable 和其它的合并，并且","options":["c0f1","acba","3099"]},"cdb6":{"id":"cdb6","label":"我已经有一个 Observable，并且","options":["9f6b","8f8f","1670","35d1","1e38","6dff","ab1f","136b","70e7","c051","ff00","b1da","6c0c","a30b","f075","99b7","467a","4050","5491","7095","668b"]},"f3c9":{"id":"f3c9","label":"race","path":"api/index/function/race","docType":"function"},"4dcf":{"id":"4dcf","label":"我只想从首先发送值的 Observable 接收各个值","options":["f3c9"]},"62e8":{"id":"62e8","label":"我想在它们全都完成时得到通知","options":["5200"]},"6adf":{"id":"6adf","label":"merge","path":"api/operators/merge","docType":"function"},"383e":{"id":"383e","label":"combineLatest","path":"api/index/function/combineLatest","docType":"function"},"b51e":{"id":"b51e","label":"当任何一个来源发送值的时候，使用每个来源发送的最后一个值","options":["383e"]},"105b":{"id":"105b","label":"zip","path":"api/index/function/zip","docType":"function"},"b13a":{"id":"b13a","label":"每个来源中的每个值仅使用一次","options":["105b"]},"dcac":{"id":"dcac","label":"我要输出根据源 Observer 发送的值计算出来的某个值","options":["b51e","b13a"]},"dbb7":{"id":"dbb7","label":"concat","path":"api/index/function/concat","docType":"function"},"ae77":{"id":"ae77","label":"我要依次订阅它们","options":["dbb7"]},"67cf":{"id":"67cf","label":"我已经有了由某些 Observable 组合成的单一 Observable，并且","options":["4dcf","62e8","3335","dcac","ae77"]},"6c02":{"id":"6c02","label":"Observable","path":"api/index/class/Observable","docType":"class","method":"create"},"a4c1":{"id":"a4c1","label":"使用自定义逻辑","options":["6c02"]},"b547":{"id":"b547","label":"generate","path":"api/index/function/generate","docType":"function"},"b433":{"id":"b433","label":"使用一个类似于 for 循环的状态机","options":["b547"]},"121a":{"id":"121a","label":"throwError","path":"api/index/function/throwError","docType":"function"},"7af6":{"id":"7af6","label":"抛出一个错误","options":["121a"]},"363c":{"id":"363c","label":"只完成它，而不发送任何值","options":["6450"]},"73c9":{"id":"73c9","label":"NEVER","path":"api/index/const/NEVER","docType":"const"},"98e9":{"id":"98e9","label":"fromEvent","path":"api/index/function/fromEvent","docType":"function"},"9bf5":{"id":"9bf5","label":"来自 DOM 或 Node.js 或类似的东西","options":["98e9"]},"48ce":{"id":"48ce","label":"fromEventPattern","path":"api/index/function/fromEventPattern","docType":"function"},"467d":{"id":"467d","label":"它使用某个 API 来添加或移除事件处理器","options":["48ce"]},"e274":{"id":"e274","label":"从一个现有的事件源","options":["9bf5","467d"]},"fc17":{"id":"fc17","label":"from","path":"api/index/function/from","docType":"function"},"2a2a":{"id":"2a2a","label":"针对某个数组中的那些值","options":["fc17"]},"cbde":{"id":"cbde","label":"针对某个数字范围内的那些值","options":["5764"]},"b164":{"id":"b164","label":"of","path":"api/index/function/of","docType":"function"},"9ccf":{"id":"9ccf","label":"针对通过参数给出的那些值","options":["b164"]},"33b9":{"id":"33b9","label":"它是可迭代者","options":["2a2a","cbde","9ccf"]},"ac56":{"id":"ac56","label":"interval","path":"api/index/function/interval","docType":"function"},"37b4":{"id":"37b4","label":"均匀的","options":["ac56"]},"b8df":{"id":"b8df","label":"带有一个可选的首次延迟","options":["8045"]},"88ed":{"id":"88ed","label":"它基于定时器发送一些值","options":["37b4","b8df"]},"67e1":{"id":"67e1","label":"它在被订阅时才按需创建","options":["2648"]},"1cf3":{"id":"1cf3","label":"我要创建一个新的 Observable","options":["a4c1","b433","7af6","363c","3762","e274","6940","33b9","88ed","67e1"]},"38a6":{"id":"38a6","label":"支持常规的回调 API","options":["6098"]},"818a":{"id":"818a","label":"bindNodeCallback","path":"api/index/function/bindNodeCallback","docType":"function"},"176b":{"id":"176b","label":"支持 Node.js 风格的回调 API","options":["818a"]},"initial":{"id":"initial","options":["cdb6","67cf","4057"]}}